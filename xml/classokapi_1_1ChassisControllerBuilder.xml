<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="classokapi_1_1ChassisControllerBuilder" kind="class" language="C++" prot="public">
    <compoundname>okapi::ChassisControllerBuilder</compoundname>
    <includes refid="chassisControllerBuilder_8hpp" local="no">chassisControllerBuilder.hpp</includes>
    <innerclass refid="structokapi_1_1ChassisControllerBuilder_1_1SkidSteerMotors" prot="private">okapi::ChassisControllerBuilder::SkidSteerMotors</innerclass>
    <innerclass refid="structokapi_1_1ChassisControllerBuilder_1_1XDriveMotors" prot="private">okapi::ChassisControllerBuilder::XDriveMotors</innerclass>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classokapi_1_1ChassisControllerBuilder_1ad4e3dd96b691533fe2d18c907efd0a49" prot="private" static="no" mutable="no">
        <type>std::shared_ptr&lt; <ref refid="classokapi_1_1Logger" kindref="compound">Logger</ref> &gt;</type>
        <definition>std::shared_ptr&lt;Logger&gt; okapi::ChassisControllerBuilder::logger</definition>
        <argsstring></argsstring>
        <name>logger</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/okapi/impl/chassis/controller/chassisControllerBuilder.hpp" line="320" column="1" bodyfile="include/okapi/impl/chassis/controller/chassisControllerBuilder.hpp" bodystart="320" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classokapi_1_1ChassisControllerBuilder_1a4b06388f38adaef235363d37cee44c52" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool okapi::ChassisControllerBuilder::hasMotors</definition>
        <argsstring></argsstring>
        <name>hasMotors</name>
        <initializer>{false}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/okapi/impl/chassis/controller/chassisControllerBuilder.hpp" line="334" column="1" bodyfile="include/okapi/impl/chassis/controller/chassisControllerBuilder.hpp" bodystart="334" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classokapi_1_1ChassisControllerBuilder_1a36381bf3a669d3a9005ec5711066f50c" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool okapi::ChassisControllerBuilder::isSkidSteer</definition>
        <argsstring></argsstring>
        <name>isSkidSteer</name>
        <initializer>{true}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/okapi/impl/chassis/controller/chassisControllerBuilder.hpp" line="335" column="1" bodyfile="include/okapi/impl/chassis/controller/chassisControllerBuilder.hpp" bodystart="335" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classokapi_1_1ChassisControllerBuilder_1a7cdc148f76862392b61422bf29a4c950" prot="private" static="no" mutable="no">
        <type>SkidSteerMotors</type>
        <definition>SkidSteerMotors okapi::ChassisControllerBuilder::skidSteerMotors</definition>
        <argsstring></argsstring>
        <name>skidSteerMotors</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/okapi/impl/chassis/controller/chassisControllerBuilder.hpp" line="336" column="1" bodyfile="include/okapi/impl/chassis/controller/chassisControllerBuilder.hpp" bodystart="336" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classokapi_1_1ChassisControllerBuilder_1a2c58d1ee214a1854e8be3d9c4a31f7a9" prot="private" static="no" mutable="no">
        <type>XDriveMotors</type>
        <definition>XDriveMotors okapi::ChassisControllerBuilder::xDriveMotors</definition>
        <argsstring></argsstring>
        <name>xDriveMotors</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/okapi/impl/chassis/controller/chassisControllerBuilder.hpp" line="337" column="1" bodyfile="include/okapi/impl/chassis/controller/chassisControllerBuilder.hpp" bodystart="337" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classokapi_1_1ChassisControllerBuilder_1a82c45aeb7427b1ddaca0f2ff2edbcf3f" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool okapi::ChassisControllerBuilder::sensorsSetByUser</definition>
        <argsstring></argsstring>
        <name>sensorsSetByUser</name>
        <initializer>{false}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/okapi/impl/chassis/controller/chassisControllerBuilder.hpp" line="339" column="1" bodyfile="include/okapi/impl/chassis/controller/chassisControllerBuilder.hpp" bodystart="339" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classokapi_1_1ChassisControllerBuilder_1a1d8a95522515e72681c521084936168c" prot="private" static="no" mutable="no">
        <type>std::shared_ptr&lt; <ref refid="classokapi_1_1ContinuousRotarySensor" kindref="compound">ContinuousRotarySensor</ref> &gt;</type>
        <definition>std::shared_ptr&lt;ContinuousRotarySensor&gt; okapi::ChassisControllerBuilder::leftSensor</definition>
        <argsstring></argsstring>
        <name>leftSensor</name>
        <initializer>{nullptr}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/okapi/impl/chassis/controller/chassisControllerBuilder.hpp" line="340" column="1" bodyfile="include/okapi/impl/chassis/controller/chassisControllerBuilder.hpp" bodystart="340" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classokapi_1_1ChassisControllerBuilder_1a4d6c6037aa312ed880d5d7d618a38eaa" prot="private" static="no" mutable="no">
        <type>std::shared_ptr&lt; <ref refid="classokapi_1_1ContinuousRotarySensor" kindref="compound">ContinuousRotarySensor</ref> &gt;</type>
        <definition>std::shared_ptr&lt;ContinuousRotarySensor&gt; okapi::ChassisControllerBuilder::rightSensor</definition>
        <argsstring></argsstring>
        <name>rightSensor</name>
        <initializer>{nullptr}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/okapi/impl/chassis/controller/chassisControllerBuilder.hpp" line="341" column="1" bodyfile="include/okapi/impl/chassis/controller/chassisControllerBuilder.hpp" bodystart="341" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classokapi_1_1ChassisControllerBuilder_1aa0a5339fc78a570270aef05a81d5ff95" prot="private" static="no" mutable="no">
        <type>std::shared_ptr&lt; <ref refid="classokapi_1_1ContinuousRotarySensor" kindref="compound">ContinuousRotarySensor</ref> &gt;</type>
        <definition>std::shared_ptr&lt;ContinuousRotarySensor&gt; okapi::ChassisControllerBuilder::middleSensor</definition>
        <argsstring></argsstring>
        <name>middleSensor</name>
        <initializer>{nullptr}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/okapi/impl/chassis/controller/chassisControllerBuilder.hpp" line="342" column="1" bodyfile="include/okapi/impl/chassis/controller/chassisControllerBuilder.hpp" bodystart="342" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classokapi_1_1ChassisControllerBuilder_1a6b5ce773a30ee1f27981a5dce462a497" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool okapi::ChassisControllerBuilder::hasGains</definition>
        <argsstring></argsstring>
        <name>hasGains</name>
        <initializer>{false}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/okapi/impl/chassis/controller/chassisControllerBuilder.hpp" line="344" column="1" bodyfile="include/okapi/impl/chassis/controller/chassisControllerBuilder.hpp" bodystart="344" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classokapi_1_1ChassisControllerBuilder_1adb9a3cbebf17222eaf1005d4fff12e3e" prot="private" static="no" mutable="no">
        <type><ref refid="structokapi_1_1IterativePosPIDController_1_1Gains" kindref="compound">IterativePosPIDController::Gains</ref></type>
        <definition>IterativePosPIDController::Gains okapi::ChassisControllerBuilder::distanceGains</definition>
        <argsstring></argsstring>
        <name>distanceGains</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/okapi/impl/chassis/controller/chassisControllerBuilder.hpp" line="345" column="1" bodyfile="include/okapi/impl/chassis/controller/chassisControllerBuilder.hpp" bodystart="345" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classokapi_1_1ChassisControllerBuilder_1ae34e148843009d4bee269fa3d5c01822" prot="private" static="no" mutable="no">
        <type>std::unique_ptr&lt; <ref refid="classokapi_1_1Filter" kindref="compound">Filter</ref> &gt;</type>
        <definition>std::unique_ptr&lt;Filter&gt; okapi::ChassisControllerBuilder::distanceFilter</definition>
        <argsstring></argsstring>
        <name>distanceFilter</name>
        <initializer>= std::make_unique&lt;<ref refid="classokapi_1_1PassthroughFilter" kindref="compound">PassthroughFilter</ref>&gt;()</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/okapi/impl/chassis/controller/chassisControllerBuilder.hpp" line="346" column="1" bodyfile="include/okapi/impl/chassis/controller/chassisControllerBuilder.hpp" bodystart="346" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classokapi_1_1ChassisControllerBuilder_1a5132d236df76456df79e5b86bbf03a3a" prot="private" static="no" mutable="no">
        <type><ref refid="structokapi_1_1IterativePosPIDController_1_1Gains" kindref="compound">IterativePosPIDController::Gains</ref></type>
        <definition>IterativePosPIDController::Gains okapi::ChassisControllerBuilder::angleGains</definition>
        <argsstring></argsstring>
        <name>angleGains</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/okapi/impl/chassis/controller/chassisControllerBuilder.hpp" line="347" column="1" bodyfile="include/okapi/impl/chassis/controller/chassisControllerBuilder.hpp" bodystart="347" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classokapi_1_1ChassisControllerBuilder_1a858691f337b15633addeaa74c5216781" prot="private" static="no" mutable="no">
        <type>std::unique_ptr&lt; <ref refid="classokapi_1_1Filter" kindref="compound">Filter</ref> &gt;</type>
        <definition>std::unique_ptr&lt;Filter&gt; okapi::ChassisControllerBuilder::angleFilter</definition>
        <argsstring></argsstring>
        <name>angleFilter</name>
        <initializer>= std::make_unique&lt;<ref refid="classokapi_1_1PassthroughFilter" kindref="compound">PassthroughFilter</ref>&gt;()</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/okapi/impl/chassis/controller/chassisControllerBuilder.hpp" line="348" column="1" bodyfile="include/okapi/impl/chassis/controller/chassisControllerBuilder.hpp" bodystart="348" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classokapi_1_1ChassisControllerBuilder_1a660e0fe40e8dfbd505b60c094da9b272" prot="private" static="no" mutable="no">
        <type><ref refid="structokapi_1_1IterativePosPIDController_1_1Gains" kindref="compound">IterativePosPIDController::Gains</ref></type>
        <definition>IterativePosPIDController::Gains okapi::ChassisControllerBuilder::turnGains</definition>
        <argsstring></argsstring>
        <name>turnGains</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/okapi/impl/chassis/controller/chassisControllerBuilder.hpp" line="349" column="1" bodyfile="include/okapi/impl/chassis/controller/chassisControllerBuilder.hpp" bodystart="349" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classokapi_1_1ChassisControllerBuilder_1af9e3c44dcee065ead44d0ecc145cdc68" prot="private" static="no" mutable="no">
        <type>std::unique_ptr&lt; <ref refid="classokapi_1_1Filter" kindref="compound">Filter</ref> &gt;</type>
        <definition>std::unique_ptr&lt;Filter&gt; okapi::ChassisControllerBuilder::turnFilter</definition>
        <argsstring></argsstring>
        <name>turnFilter</name>
        <initializer>= std::make_unique&lt;<ref refid="classokapi_1_1PassthroughFilter" kindref="compound">PassthroughFilter</ref>&gt;()</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/okapi/impl/chassis/controller/chassisControllerBuilder.hpp" line="350" column="1" bodyfile="include/okapi/impl/chassis/controller/chassisControllerBuilder.hpp" bodystart="350" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classokapi_1_1ChassisControllerBuilder_1a9fedf30fa7246f8bf8983452f397eb5a" prot="private" static="no" mutable="no">
        <type><ref refid="classokapi_1_1TimeUtilFactory" kindref="compound">TimeUtilFactory</ref></type>
        <definition>TimeUtilFactory okapi::ChassisControllerBuilder::chassisControllerTimeUtilFactory</definition>
        <argsstring></argsstring>
        <name>chassisControllerTimeUtilFactory</name>
        <initializer>= <ref refid="classokapi_1_1TimeUtilFactory" kindref="compound">TimeUtilFactory</ref>()</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/okapi/impl/chassis/controller/chassisControllerBuilder.hpp" line="351" column="1" bodyfile="include/okapi/impl/chassis/controller/chassisControllerBuilder.hpp" bodystart="351" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classokapi_1_1ChassisControllerBuilder_1a03255e77dec235d4af3818db91f9552e" prot="private" static="no" mutable="no">
        <type><ref refid="classokapi_1_1TimeUtilFactory" kindref="compound">TimeUtilFactory</ref></type>
        <definition>TimeUtilFactory okapi::ChassisControllerBuilder::closedLoopControllerTimeUtilFactory</definition>
        <argsstring></argsstring>
        <name>closedLoopControllerTimeUtilFactory</name>
        <initializer>= <ref refid="classokapi_1_1TimeUtilFactory" kindref="compound">TimeUtilFactory</ref>()</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/okapi/impl/chassis/controller/chassisControllerBuilder.hpp" line="352" column="1" bodyfile="include/okapi/impl/chassis/controller/chassisControllerBuilder.hpp" bodystart="352" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classokapi_1_1ChassisControllerBuilder_1ab690d2a35c51cdd4f14a6a0a6e4d1ba1" prot="private" static="no" mutable="no">
        <type><ref refid="classokapi_1_1TimeUtilFactory" kindref="compound">TimeUtilFactory</ref></type>
        <definition>TimeUtilFactory okapi::ChassisControllerBuilder::odometryTimeUtilFactory</definition>
        <argsstring></argsstring>
        <name>odometryTimeUtilFactory</name>
        <initializer>= <ref refid="classokapi_1_1TimeUtilFactory" kindref="compound">TimeUtilFactory</ref>()</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/okapi/impl/chassis/controller/chassisControllerBuilder.hpp" line="353" column="1" bodyfile="include/okapi/impl/chassis/controller/chassisControllerBuilder.hpp" bodystart="353" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classokapi_1_1ChassisControllerBuilder_1ae72db959b82de5f1e63e999d771f2f54" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool okapi::ChassisControllerBuilder::gearsetSetByUser</definition>
        <argsstring></argsstring>
        <name>gearsetSetByUser</name>
        <initializer>{false}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/okapi/impl/chassis/controller/chassisControllerBuilder.hpp" line="355" column="1" bodyfile="include/okapi/impl/chassis/controller/chassisControllerBuilder.hpp" bodystart="355" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classokapi_1_1ChassisControllerBuilder_1a7fd82a0f66755a69f05085ad0adacf94" prot="private" static="no" mutable="no">
        <type><ref refid="structokapi_1_1AbstractMotor_1_1GearsetRatioPair" kindref="compound">AbstractMotor::GearsetRatioPair</ref></type>
        <definition>AbstractMotor::GearsetRatioPair okapi::ChassisControllerBuilder::gearset</definition>
        <argsstring></argsstring>
        <name>gearset</name>
        <initializer>{<ref refid="classokapi_1_1AbstractMotor_1a88aaa6ea2fa10f5520a537bbf26774d5afedb2d84cafe20862cb4399751a8a7e3" kindref="member">AbstractMotor::gearset::invalid</ref>}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/okapi/impl/chassis/controller/chassisControllerBuilder.hpp" line="356" column="1" bodyfile="include/okapi/impl/chassis/controller/chassisControllerBuilder.hpp" bodystart="356" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classokapi_1_1ChassisControllerBuilder_1aef80b3a024b83fb94da6f31c283e81ac" prot="private" static="no" mutable="no">
        <type><ref refid="classokapi_1_1ChassisScales" kindref="compound">ChassisScales</ref></type>
        <definition>ChassisScales okapi::ChassisControllerBuilder::scales</definition>
        <argsstring></argsstring>
        <name>scales</name>
        <initializer>{{1, 1}, <ref refid="namespaceokapi_1a5263bab3bfecd482a573b6d04fb584ac" kindref="member">imev5GreenTPR</ref>}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/okapi/impl/chassis/controller/chassisControllerBuilder.hpp" line="357" column="1" bodyfile="include/okapi/impl/chassis/controller/chassisControllerBuilder.hpp" bodystart="357" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classokapi_1_1ChassisControllerBuilder_1a96418cbd1647eaa4cb9ba8873636a099" prot="private" static="no" mutable="no">
        <type>std::shared_ptr&lt; <ref refid="classokapi_1_1Logger" kindref="compound">Logger</ref> &gt;</type>
        <definition>std::shared_ptr&lt;Logger&gt; okapi::ChassisControllerBuilder::controllerLogger</definition>
        <argsstring></argsstring>
        <name>controllerLogger</name>
        <initializer>= <ref refid="classokapi_1_1Logger_1a5053cf778b4b55acba788a3797dc96d2" kindref="member">Logger::getDefaultLogger</ref>()</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/okapi/impl/chassis/controller/chassisControllerBuilder.hpp" line="358" column="1" bodyfile="include/okapi/impl/chassis/controller/chassisControllerBuilder.hpp" bodystart="358" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classokapi_1_1ChassisControllerBuilder_1a74333ef2f6930e2bb82b6e0a92d06a16" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool okapi::ChassisControllerBuilder::hasOdom</definition>
        <argsstring></argsstring>
        <name>hasOdom</name>
        <initializer>{false}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/okapi/impl/chassis/controller/chassisControllerBuilder.hpp" line="360" column="1" bodyfile="include/okapi/impl/chassis/controller/chassisControllerBuilder.hpp" bodystart="360" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classokapi_1_1ChassisControllerBuilder_1a8d65c7b9461a392e607552d6e6fd1142" prot="private" static="no" mutable="no">
        <type>std::unique_ptr&lt; <ref refid="classokapi_1_1Odometry" kindref="compound">Odometry</ref> &gt;</type>
        <definition>std::unique_ptr&lt;Odometry&gt; okapi::ChassisControllerBuilder::odometry</definition>
        <argsstring></argsstring>
        <name>odometry</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/okapi/impl/chassis/controller/chassisControllerBuilder.hpp" line="361" column="1" bodyfile="include/okapi/impl/chassis/controller/chassisControllerBuilder.hpp" bodystart="361" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classokapi_1_1ChassisControllerBuilder_1af4167e100fc835a034b26f9f091f58f6" prot="private" static="no" mutable="no">
        <type>QSpeed</type>
        <definition>QSpeed okapi::ChassisControllerBuilder::wheelVelDelta</definition>
        <argsstring></argsstring>
        <name>wheelVelDelta</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/okapi/impl/chassis/controller/chassisControllerBuilder.hpp" line="362" column="1" bodyfile="include/okapi/impl/chassis/controller/chassisControllerBuilder.hpp" bodystart="362" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classokapi_1_1ChassisControllerBuilder_1a005e5a409f953b868803be52662e943a" prot="private" static="no" mutable="no">
        <type><ref refid="namespaceokapi_1af37fbd761bd859a00ff4dd4a87dd8c07" kindref="member">StateMode</ref></type>
        <definition>StateMode okapi::ChassisControllerBuilder::stateMode</definition>
        <argsstring></argsstring>
        <name>stateMode</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/okapi/impl/chassis/controller/chassisControllerBuilder.hpp" line="363" column="1" bodyfile="include/okapi/impl/chassis/controller/chassisControllerBuilder.hpp" bodystart="363" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classokapi_1_1ChassisControllerBuilder_1a4770676e616026ac4215399cae91c4ae" prot="private" static="no" mutable="no">
        <type>QLength</type>
        <definition>QLength okapi::ChassisControllerBuilder::moveThreshold</definition>
        <argsstring></argsstring>
        <name>moveThreshold</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/okapi/impl/chassis/controller/chassisControllerBuilder.hpp" line="364" column="1" bodyfile="include/okapi/impl/chassis/controller/chassisControllerBuilder.hpp" bodystart="364" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classokapi_1_1ChassisControllerBuilder_1abfdae072e6f6178926cdc93935f8114b" prot="private" static="no" mutable="no">
        <type>QAngle</type>
        <definition>QAngle okapi::ChassisControllerBuilder::turnThreshold</definition>
        <argsstring></argsstring>
        <name>turnThreshold</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/okapi/impl/chassis/controller/chassisControllerBuilder.hpp" line="365" column="1" bodyfile="include/okapi/impl/chassis/controller/chassisControllerBuilder.hpp" bodystart="365" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classokapi_1_1ChassisControllerBuilder_1a6a706383d723514c42935f274633e49b" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool okapi::ChassisControllerBuilder::maxVelSetByUser</definition>
        <argsstring></argsstring>
        <name>maxVelSetByUser</name>
        <initializer>{false}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/okapi/impl/chassis/controller/chassisControllerBuilder.hpp" line="367" column="1" bodyfile="include/okapi/impl/chassis/controller/chassisControllerBuilder.hpp" bodystart="367" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classokapi_1_1ChassisControllerBuilder_1a5e3cd2bf5f2d89f048e00f40d5e2531e" prot="private" static="no" mutable="no">
        <type>double</type>
        <definition>double okapi::ChassisControllerBuilder::maxVelocity</definition>
        <argsstring></argsstring>
        <name>maxVelocity</name>
        <initializer>{600}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/okapi/impl/chassis/controller/chassisControllerBuilder.hpp" line="368" column="1" bodyfile="include/okapi/impl/chassis/controller/chassisControllerBuilder.hpp" bodystart="368" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classokapi_1_1ChassisControllerBuilder_1a7d1d01e772c46fa5364a1c869c72a83c" prot="private" static="no" mutable="no">
        <type>double</type>
        <definition>double okapi::ChassisControllerBuilder::maxVoltage</definition>
        <argsstring></argsstring>
        <name>maxVoltage</name>
        <initializer>{12000}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/okapi/impl/chassis/controller/chassisControllerBuilder.hpp" line="370" column="1" bodyfile="include/okapi/impl/chassis/controller/chassisControllerBuilder.hpp" bodystart="370" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classokapi_1_1ChassisControllerBuilder_1a47e82afd7b6f3e3076d153e6130820ed" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>okapi::ChassisControllerBuilder::ChassisControllerBuilder</definition>
        <argsstring>(const std::shared_ptr&lt; Logger &gt; &amp;ilogger=Logger::getDefaultLogger())</argsstring>
        <name>ChassisControllerBuilder</name>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="classokapi_1_1Logger" kindref="compound">Logger</ref> &gt; &amp;</type>
          <declname>ilogger</declname>
          <defval><ref refid="classokapi_1_1Logger_1a5053cf778b4b55acba788a3797dc96d2" kindref="member">Logger::getDefaultLogger</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>A builder that creates ChassisControllers. Use this to create your <ref refid="classokapi_1_1ChassisController" kindref="compound">ChassisController</ref>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ilogger</parametername>
</parameternamelist>
<parameterdescription>
<para>The logger this instance will log to. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/okapi/impl/chassis/controller/chassisControllerBuilder.hpp" line="31" column="1" bodyfile="src/impl/chassis/controller/chassisControllerBuilder.cpp" bodystart="14" bodyend="16"/>
      </memberdef>
      <memberdef kind="function" id="classokapi_1_1ChassisControllerBuilder_1a1ceb7c4b4f0ccfd37a92d8ffd64fa64e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classokapi_1_1ChassisControllerBuilder" kindref="compound">ChassisControllerBuilder</ref> &amp;</type>
        <definition>ChassisControllerBuilder &amp; okapi::ChassisControllerBuilder::withMotors</definition>
        <argsstring>(const Motor &amp;ileft, const Motor &amp;iright)</argsstring>
        <name>withMotors</name>
        <param>
          <type>const <ref refid="classokapi_1_1Motor" kindref="compound">Motor</ref> &amp;</type>
          <declname>ileft</declname>
        </param>
        <param>
          <type>const <ref refid="classokapi_1_1Motor" kindref="compound">Motor</ref> &amp;</type>
          <declname>iright</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets the motors using a skid-steer layout.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ileft</parametername>
</parameternamelist>
<parameterdescription>
<para>The left motor. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>iright</parametername>
</parameternamelist>
<parameterdescription>
<para>The right motor. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>An ongoing builder. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/okapi/impl/chassis/controller/chassisControllerBuilder.hpp" line="41" column="1" bodyfile="src/impl/chassis/controller/chassisControllerBuilder.cpp" bodystart="18" bodyend="21"/>
      </memberdef>
      <memberdef kind="function" id="classokapi_1_1ChassisControllerBuilder_1a98b304ce096222c0f3af8105ab61ee71" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classokapi_1_1ChassisControllerBuilder" kindref="compound">ChassisControllerBuilder</ref> &amp;</type>
        <definition>ChassisControllerBuilder &amp; okapi::ChassisControllerBuilder::withMotors</definition>
        <argsstring>(const MotorGroup &amp;ileft, const MotorGroup &amp;iright)</argsstring>
        <name>withMotors</name>
        <param>
          <type>const <ref refid="classokapi_1_1MotorGroup" kindref="compound">MotorGroup</ref> &amp;</type>
          <declname>ileft</declname>
        </param>
        <param>
          <type>const <ref refid="classokapi_1_1MotorGroup" kindref="compound">MotorGroup</ref> &amp;</type>
          <declname>iright</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets the motors using a skid-steer layout.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ileft</parametername>
</parameternamelist>
<parameterdescription>
<para>The left motor. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>iright</parametername>
</parameternamelist>
<parameterdescription>
<para>The right motor. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>An ongoing builder. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/okapi/impl/chassis/controller/chassisControllerBuilder.hpp" line="50" column="1" bodyfile="src/impl/chassis/controller/chassisControllerBuilder.cpp" bodystart="23" bodyend="26"/>
      </memberdef>
      <memberdef kind="function" id="classokapi_1_1ChassisControllerBuilder_1a4482565290d9433bff4dc6c48543e334" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classokapi_1_1ChassisControllerBuilder" kindref="compound">ChassisControllerBuilder</ref> &amp;</type>
        <definition>ChassisControllerBuilder &amp; okapi::ChassisControllerBuilder::withMotors</definition>
        <argsstring>(const std::shared_ptr&lt; AbstractMotor &gt; &amp;ileft, const std::shared_ptr&lt; AbstractMotor &gt; &amp;iright)</argsstring>
        <name>withMotors</name>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="classokapi_1_1AbstractMotor" kindref="compound">AbstractMotor</ref> &gt; &amp;</type>
          <declname>ileft</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="classokapi_1_1AbstractMotor" kindref="compound">AbstractMotor</ref> &gt; &amp;</type>
          <declname>iright</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets the motors using a skid-steer layout.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ileft</parametername>
</parameternamelist>
<parameterdescription>
<para>The left motor. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>iright</parametername>
</parameternamelist>
<parameterdescription>
<para>The right motor. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>An ongoing builder. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/okapi/impl/chassis/controller/chassisControllerBuilder.hpp" line="59" column="1" bodyfile="src/impl/chassis/controller/chassisControllerBuilder.cpp" bodystart="29" bodyend="49"/>
      </memberdef>
      <memberdef kind="function" id="classokapi_1_1ChassisControllerBuilder_1a0d0a144c1b600aa90cf19b6a76a7dd04" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classokapi_1_1ChassisControllerBuilder" kindref="compound">ChassisControllerBuilder</ref> &amp;</type>
        <definition>ChassisControllerBuilder &amp; okapi::ChassisControllerBuilder::withMotors</definition>
        <argsstring>(const Motor &amp;itopLeft, const Motor &amp;itopRight, const Motor &amp;ibottomRight, const Motor &amp;ibottomLeft)</argsstring>
        <name>withMotors</name>
        <param>
          <type>const <ref refid="classokapi_1_1Motor" kindref="compound">Motor</ref> &amp;</type>
          <declname>itopLeft</declname>
        </param>
        <param>
          <type>const <ref refid="classokapi_1_1Motor" kindref="compound">Motor</ref> &amp;</type>
          <declname>itopRight</declname>
        </param>
        <param>
          <type>const <ref refid="classokapi_1_1Motor" kindref="compound">Motor</ref> &amp;</type>
          <declname>ibottomRight</declname>
        </param>
        <param>
          <type>const <ref refid="classokapi_1_1Motor" kindref="compound">Motor</ref> &amp;</type>
          <declname>ibottomLeft</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets the motors using an x-drive layout.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>itopLeft</parametername>
</parameternamelist>
<parameterdescription>
<para>The top left motor. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>itopRight</parametername>
</parameternamelist>
<parameterdescription>
<para>The top right motor. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ibottomRight</parametername>
</parameternamelist>
<parameterdescription>
<para>The bottom right motor. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ibottomLeft</parametername>
</parameternamelist>
<parameterdescription>
<para>The bottom left motor. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>An ongoing builder. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/okapi/impl/chassis/controller/chassisControllerBuilder.hpp" line="71" column="1" bodyfile="src/impl/chassis/controller/chassisControllerBuilder.cpp" bodystart="51" bodyend="59"/>
      </memberdef>
      <memberdef kind="function" id="classokapi_1_1ChassisControllerBuilder_1a5f8ddcfcd9c00fc205c1ec0536db3118" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classokapi_1_1ChassisControllerBuilder" kindref="compound">ChassisControllerBuilder</ref> &amp;</type>
        <definition>ChassisControllerBuilder &amp; okapi::ChassisControllerBuilder::withMotors</definition>
        <argsstring>(const MotorGroup &amp;itopLeft, const MotorGroup &amp;itopRight, const MotorGroup &amp;ibottomRight, const MotorGroup &amp;ibottomLeft)</argsstring>
        <name>withMotors</name>
        <param>
          <type>const <ref refid="classokapi_1_1MotorGroup" kindref="compound">MotorGroup</ref> &amp;</type>
          <declname>itopLeft</declname>
        </param>
        <param>
          <type>const <ref refid="classokapi_1_1MotorGroup" kindref="compound">MotorGroup</ref> &amp;</type>
          <declname>itopRight</declname>
        </param>
        <param>
          <type>const <ref refid="classokapi_1_1MotorGroup" kindref="compound">MotorGroup</ref> &amp;</type>
          <declname>ibottomRight</declname>
        </param>
        <param>
          <type>const <ref refid="classokapi_1_1MotorGroup" kindref="compound">MotorGroup</ref> &amp;</type>
          <declname>ibottomLeft</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets the motors using an x-drive layout.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>itopLeft</parametername>
</parameternamelist>
<parameterdescription>
<para>The top left motor. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>itopRight</parametername>
</parameternamelist>
<parameterdescription>
<para>The top right motor. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ibottomRight</parametername>
</parameternamelist>
<parameterdescription>
<para>The bottom right motor. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ibottomLeft</parametername>
</parameternamelist>
<parameterdescription>
<para>The bottom left motor. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>An ongoing builder. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/okapi/impl/chassis/controller/chassisControllerBuilder.hpp" line="85" column="1" bodyfile="src/impl/chassis/controller/chassisControllerBuilder.cpp" bodystart="61" bodyend="69"/>
      </memberdef>
      <memberdef kind="function" id="classokapi_1_1ChassisControllerBuilder_1a423ebf033857cae3bfcf5542db6dffd2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classokapi_1_1ChassisControllerBuilder" kindref="compound">ChassisControllerBuilder</ref> &amp;</type>
        <definition>ChassisControllerBuilder &amp; okapi::ChassisControllerBuilder::withMotors</definition>
        <argsstring>(const std::shared_ptr&lt; AbstractMotor &gt; &amp;itopLeft, const std::shared_ptr&lt; AbstractMotor &gt; &amp;itopRight, const std::shared_ptr&lt; AbstractMotor &gt; &amp;ibottomRight, const std::shared_ptr&lt; AbstractMotor &gt; &amp;ibottomLeft)</argsstring>
        <name>withMotors</name>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="classokapi_1_1AbstractMotor" kindref="compound">AbstractMotor</ref> &gt; &amp;</type>
          <declname>itopLeft</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="classokapi_1_1AbstractMotor" kindref="compound">AbstractMotor</ref> &gt; &amp;</type>
          <declname>itopRight</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="classokapi_1_1AbstractMotor" kindref="compound">AbstractMotor</ref> &gt; &amp;</type>
          <declname>ibottomRight</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="classokapi_1_1AbstractMotor" kindref="compound">AbstractMotor</ref> &gt; &amp;</type>
          <declname>ibottomLeft</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets the motors using an x-drive layout.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>itopLeft</parametername>
</parameternamelist>
<parameterdescription>
<para>The top left motor. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>itopRight</parametername>
</parameternamelist>
<parameterdescription>
<para>The top right motor. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ibottomRight</parametername>
</parameternamelist>
<parameterdescription>
<para>The bottom right motor. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ibottomLeft</parametername>
</parameternamelist>
<parameterdescription>
<para>The bottom left motor. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>An ongoing builder. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/okapi/impl/chassis/controller/chassisControllerBuilder.hpp" line="99" column="1" bodyfile="src/impl/chassis/controller/chassisControllerBuilder.cpp" bodystart="72" bodyend="94"/>
      </memberdef>
      <memberdef kind="function" id="classokapi_1_1ChassisControllerBuilder_1a0197aa35c2c36dd82476bc70c5824a56" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classokapi_1_1ChassisControllerBuilder" kindref="compound">ChassisControllerBuilder</ref> &amp;</type>
        <definition>ChassisControllerBuilder &amp; okapi::ChassisControllerBuilder::withSensors</definition>
        <argsstring>(const ADIEncoder &amp;ileft, const ADIEncoder &amp;iright)</argsstring>
        <name>withSensors</name>
        <param>
          <type>const <ref refid="classokapi_1_1ADIEncoder" kindref="compound">ADIEncoder</ref> &amp;</type>
          <declname>ileft</declname>
        </param>
        <param>
          <type>const <ref refid="classokapi_1_1ADIEncoder" kindref="compound">ADIEncoder</ref> &amp;</type>
          <declname>iright</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets the sensors. The default sensors are the motor&apos;s integrated encoders.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ileft</parametername>
</parameternamelist>
<parameterdescription>
<para>The left side sensor. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>iright</parametername>
</parameternamelist>
<parameterdescription>
<para>The right side sensor. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>An ongoing builder. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/okapi/impl/chassis/controller/chassisControllerBuilder.hpp" line="111" column="1" bodyfile="src/impl/chassis/controller/chassisControllerBuilder.cpp" bodystart="96" bodyend="99"/>
      </memberdef>
      <memberdef kind="function" id="classokapi_1_1ChassisControllerBuilder_1a5733a2198a3f10befcae5ee2a9a02d7e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classokapi_1_1ChassisControllerBuilder" kindref="compound">ChassisControllerBuilder</ref> &amp;</type>
        <definition>ChassisControllerBuilder &amp; okapi::ChassisControllerBuilder::withSensors</definition>
        <argsstring>(const ADIEncoder &amp;ileft, const ADIEncoder &amp;iright, const ADIEncoder &amp;imiddle)</argsstring>
        <name>withSensors</name>
        <param>
          <type>const <ref refid="classokapi_1_1ADIEncoder" kindref="compound">ADIEncoder</ref> &amp;</type>
          <declname>ileft</declname>
        </param>
        <param>
          <type>const <ref refid="classokapi_1_1ADIEncoder" kindref="compound">ADIEncoder</ref> &amp;</type>
          <declname>iright</declname>
        </param>
        <param>
          <type>const <ref refid="classokapi_1_1ADIEncoder" kindref="compound">ADIEncoder</ref> &amp;</type>
          <declname>imiddle</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets the sensors. The default sensors are the motor&apos;s integrated encoders.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ileft</parametername>
</parameternamelist>
<parameterdescription>
<para>The left side sensor. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>iright</parametername>
</parameternamelist>
<parameterdescription>
<para>The right side sensor. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>imiddle</parametername>
</parameternamelist>
<parameterdescription>
<para>The middle sensor. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>An ongoing builder. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/okapi/impl/chassis/controller/chassisControllerBuilder.hpp" line="122" column="1" bodyfile="src/impl/chassis/controller/chassisControllerBuilder.cpp" bodystart="101" bodyend="107"/>
      </memberdef>
      <memberdef kind="function" id="classokapi_1_1ChassisControllerBuilder_1adcc6c5e490cd2f51e319bd52f40b1d3f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classokapi_1_1ChassisControllerBuilder" kindref="compound">ChassisControllerBuilder</ref> &amp;</type>
        <definition>ChassisControllerBuilder &amp; okapi::ChassisControllerBuilder::withSensors</definition>
        <argsstring>(const IntegratedEncoder &amp;ileft, const IntegratedEncoder &amp;iright)</argsstring>
        <name>withSensors</name>
        <param>
          <type>const <ref refid="classokapi_1_1IntegratedEncoder" kindref="compound">IntegratedEncoder</ref> &amp;</type>
          <declname>ileft</declname>
        </param>
        <param>
          <type>const <ref refid="classokapi_1_1IntegratedEncoder" kindref="compound">IntegratedEncoder</ref> &amp;</type>
          <declname>iright</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets the sensors. The default sensors are the motor&apos;s integrated encoders.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ileft</parametername>
</parameternamelist>
<parameterdescription>
<para>The left side sensor. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>iright</parametername>
</parameternamelist>
<parameterdescription>
<para>The right side sensor. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>An ongoing builder. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/okapi/impl/chassis/controller/chassisControllerBuilder.hpp" line="131" column="1" bodyfile="src/impl/chassis/controller/chassisControllerBuilder.cpp" bodystart="109" bodyend="113"/>
      </memberdef>
      <memberdef kind="function" id="classokapi_1_1ChassisControllerBuilder_1a9ba0a2bf4c4d0334f96bd08b08144cc3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classokapi_1_1ChassisControllerBuilder" kindref="compound">ChassisControllerBuilder</ref> &amp;</type>
        <definition>ChassisControllerBuilder &amp; okapi::ChassisControllerBuilder::withSensors</definition>
        <argsstring>(const IntegratedEncoder &amp;ileft, const IntegratedEncoder &amp;iright, const ADIEncoder &amp;imiddle)</argsstring>
        <name>withSensors</name>
        <param>
          <type>const <ref refid="classokapi_1_1IntegratedEncoder" kindref="compound">IntegratedEncoder</ref> &amp;</type>
          <declname>ileft</declname>
        </param>
        <param>
          <type>const <ref refid="classokapi_1_1IntegratedEncoder" kindref="compound">IntegratedEncoder</ref> &amp;</type>
          <declname>iright</declname>
        </param>
        <param>
          <type>const <ref refid="classokapi_1_1ADIEncoder" kindref="compound">ADIEncoder</ref> &amp;</type>
          <declname>imiddle</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets the sensors. The default sensors are the motor&apos;s integrated encoders.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ileft</parametername>
</parameternamelist>
<parameterdescription>
<para>The left side sensor. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>iright</parametername>
</parameternamelist>
<parameterdescription>
<para>The right side sensor. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>imiddle</parametername>
</parameternamelist>
<parameterdescription>
<para>The middle sensor. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>An ongoing builder. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/okapi/impl/chassis/controller/chassisControllerBuilder.hpp" line="142" column="1" bodyfile="src/impl/chassis/controller/chassisControllerBuilder.cpp" bodystart="116" bodyend="122"/>
      </memberdef>
      <memberdef kind="function" id="classokapi_1_1ChassisControllerBuilder_1a10214db4bffeb20b0e7b3d5c956061fa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classokapi_1_1ChassisControllerBuilder" kindref="compound">ChassisControllerBuilder</ref> &amp;</type>
        <definition>ChassisControllerBuilder &amp; okapi::ChassisControllerBuilder::withSensors</definition>
        <argsstring>(const std::shared_ptr&lt; ContinuousRotarySensor &gt; &amp;ileft, const std::shared_ptr&lt; ContinuousRotarySensor &gt; &amp;iright)</argsstring>
        <name>withSensors</name>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="classokapi_1_1ContinuousRotarySensor" kindref="compound">ContinuousRotarySensor</ref> &gt; &amp;</type>
          <declname>ileft</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="classokapi_1_1ContinuousRotarySensor" kindref="compound">ContinuousRotarySensor</ref> &gt; &amp;</type>
          <declname>iright</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets the sensors. The default sensors are the motor&apos;s integrated encoders.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ileft</parametername>
</parameternamelist>
<parameterdescription>
<para>The left side sensor. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>iright</parametername>
</parameternamelist>
<parameterdescription>
<para>The right side sensor. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>An ongoing builder. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/okapi/impl/chassis/controller/chassisControllerBuilder.hpp" line="153" column="1" bodyfile="src/impl/chassis/controller/chassisControllerBuilder.cpp" bodystart="125" bodyend="131"/>
      </memberdef>
      <memberdef kind="function" id="classokapi_1_1ChassisControllerBuilder_1a2c2d1276f03425ecbe97b55ce8832d9e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classokapi_1_1ChassisControllerBuilder" kindref="compound">ChassisControllerBuilder</ref> &amp;</type>
        <definition>ChassisControllerBuilder&amp; okapi::ChassisControllerBuilder::withSensors</definition>
        <argsstring>(const std::shared_ptr&lt; ContinuousRotarySensor &gt; &amp;ileft, const std::shared_ptr&lt; ContinuousRotarySensor &gt; &amp;iright, const std::shared_ptr&lt; ContinuousRotarySensor &gt; &amp;imiddle)</argsstring>
        <name>withSensors</name>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="classokapi_1_1ContinuousRotarySensor" kindref="compound">ContinuousRotarySensor</ref> &gt; &amp;</type>
          <declname>ileft</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="classokapi_1_1ContinuousRotarySensor" kindref="compound">ContinuousRotarySensor</ref> &gt; &amp;</type>
          <declname>iright</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="classokapi_1_1ContinuousRotarySensor" kindref="compound">ContinuousRotarySensor</ref> &gt; &amp;</type>
          <declname>imiddle</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets the sensors. The default sensors are the motor&apos;s integrated encoders.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ileft</parametername>
</parameternamelist>
<parameterdescription>
<para>The left side sensor. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>iright</parametername>
</parameternamelist>
<parameterdescription>
<para>The right side sensor. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>imiddle</parametername>
</parameternamelist>
<parameterdescription>
<para>The middle sensor. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>An ongoing builder. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/okapi/impl/chassis/controller/chassisControllerBuilder.hpp" line="164" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classokapi_1_1ChassisControllerBuilder_1ac7b348a81cda8897540db92f14d1d8e3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classokapi_1_1ChassisControllerBuilder" kindref="compound">ChassisControllerBuilder</ref> &amp;</type>
        <definition>ChassisControllerBuilder &amp; okapi::ChassisControllerBuilder::withGains</definition>
        <argsstring>(const IterativePosPIDController::Gains &amp;idistanceGains, const IterativePosPIDController::Gains &amp;iturnGains)</argsstring>
        <name>withGains</name>
        <param>
          <type>const <ref refid="structokapi_1_1IterativePosPIDController_1_1Gains" kindref="compound">IterativePosPIDController::Gains</ref> &amp;</type>
          <declname>idistanceGains</declname>
        </param>
        <param>
          <type>const <ref refid="structokapi_1_1IterativePosPIDController_1_1Gains" kindref="compound">IterativePosPIDController::Gains</ref> &amp;</type>
          <declname>iturnGains</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets the PID controller gains, causing the builder to generate a <ref refid="classokapi_1_1ChassisControllerPID" kindref="compound">ChassisControllerPID</ref>. Uses the turn controller&apos;s gains for the angle controller&apos;s gains.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>idistanceGains</parametername>
</parameternamelist>
<parameterdescription>
<para>The distance controller&apos;s gains. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>iturnGains</parametername>
</parameternamelist>
<parameterdescription>
<para>The turn controller&apos;s gains. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>An ongoing builder. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/okapi/impl/chassis/controller/chassisControllerBuilder.hpp" line="176" column="1" bodyfile="src/impl/chassis/controller/chassisControllerBuilder.cpp" bodystart="145" bodyend="148"/>
      </memberdef>
      <memberdef kind="function" id="classokapi_1_1ChassisControllerBuilder_1a4fa2d56589f5a4c8e69b36238bc3f4de" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classokapi_1_1ChassisControllerBuilder" kindref="compound">ChassisControllerBuilder</ref> &amp;</type>
        <definition>ChassisControllerBuilder &amp; okapi::ChassisControllerBuilder::withGains</definition>
        <argsstring>(const IterativePosPIDController::Gains &amp;idistanceGains, const IterativePosPIDController::Gains &amp;iturnGains, const IterativePosPIDController::Gains &amp;iangleGains)</argsstring>
        <name>withGains</name>
        <param>
          <type>const <ref refid="structokapi_1_1IterativePosPIDController_1_1Gains" kindref="compound">IterativePosPIDController::Gains</ref> &amp;</type>
          <declname>idistanceGains</declname>
        </param>
        <param>
          <type>const <ref refid="structokapi_1_1IterativePosPIDController_1_1Gains" kindref="compound">IterativePosPIDController::Gains</ref> &amp;</type>
          <declname>iturnGains</declname>
        </param>
        <param>
          <type>const <ref refid="structokapi_1_1IterativePosPIDController_1_1Gains" kindref="compound">IterativePosPIDController::Gains</ref> &amp;</type>
          <declname>iangleGains</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets the PID controller gains, causing the builder to generate a <ref refid="classokapi_1_1ChassisControllerPID" kindref="compound">ChassisControllerPID</ref>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>idistanceGains</parametername>
</parameternamelist>
<parameterdescription>
<para>The distance controller&apos;s gains. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>iturnGains</parametername>
</parameternamelist>
<parameterdescription>
<para>The turn controller&apos;s gains. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>iangleGains</parametername>
</parameternamelist>
<parameterdescription>
<para>The angle controller&apos;s gains. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>An ongoing builder. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/okapi/impl/chassis/controller/chassisControllerBuilder.hpp" line="187" column="1" bodyfile="src/impl/chassis/controller/chassisControllerBuilder.cpp" bodystart="151" bodyend="159"/>
      </memberdef>
      <memberdef kind="function" id="classokapi_1_1ChassisControllerBuilder_1aa4686900014387dbc3b335ee813c3ead" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classokapi_1_1ChassisControllerBuilder" kindref="compound">ChassisControllerBuilder</ref> &amp;</type>
        <definition>ChassisControllerBuilder &amp; okapi::ChassisControllerBuilder::withOdometry</definition>
        <argsstring>(const StateMode &amp;imode=StateMode::FRAME_TRANSFORMATION, const QLength &amp;imoveThreshold=0_mm, const QAngle &amp;iturnThreshold=0_deg, const QSpeed &amp;iwheelVelDelta=0.0001_mps)</argsstring>
        <name>withOdometry</name>
        <param>
          <type>const <ref refid="namespaceokapi_1af37fbd761bd859a00ff4dd4a87dd8c07" kindref="member">StateMode</ref> &amp;</type>
          <declname>imode</declname>
          <defval><ref refid="namespaceokapi_1af37fbd761bd859a00ff4dd4a87dd8c07ad5ed7666e5cebf60d3af20a5a46edf3b" kindref="member">StateMode::FRAME_TRANSFORMATION</ref></defval>
        </param>
        <param>
          <type>const QLength &amp;</type>
          <declname>imoveThreshold</declname>
          <defval>0_mm</defval>
        </param>
        <param>
          <type>const QAngle &amp;</type>
          <declname>iturnThreshold</declname>
          <defval>0_deg</defval>
        </param>
        <param>
          <type>const QSpeed &amp;</type>
          <declname>iwheelVelDelta</declname>
          <defval>0.0001_mps</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets the odometry information, causing the builder to generate an <ref refid="classokapi_1_1Odometry" kindref="compound">Odometry</ref> variant.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>imode</parametername>
</parameternamelist>
<parameterdescription>
<para>The new default StateMode used to interpret target points and query the <ref refid="classokapi_1_1Odometry" kindref="compound">Odometry</ref> state. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>imoveThreshold</parametername>
</parameternamelist>
<parameterdescription>
<para>The minimum length movement. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>iturnThreshold</parametername>
</parameternamelist>
<parameterdescription>
<para>The minimum angle turn. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>iwheelVelDelta</parametername>
</parameternamelist>
<parameterdescription>
<para>The maximum delta between wheel velocities to consider the robot as driving straight. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>An ongoing builder. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/okapi/impl/chassis/controller/chassisControllerBuilder.hpp" line="202" column="1" bodyfile="src/impl/chassis/controller/chassisControllerBuilder.cpp" bodystart="171" bodyend="182"/>
      </memberdef>
      <memberdef kind="function" id="classokapi_1_1ChassisControllerBuilder_1aa775099a284db24e6832022668d0a344" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classokapi_1_1ChassisControllerBuilder" kindref="compound">ChassisControllerBuilder</ref> &amp;</type>
        <definition>ChassisControllerBuilder &amp; okapi::ChassisControllerBuilder::withOdometry</definition>
        <argsstring>(std::unique_ptr&lt; Odometry &gt; iodometry, const StateMode &amp;imode=StateMode::FRAME_TRANSFORMATION, const QLength &amp;imoveThreshold=0_mm, const QAngle &amp;iturnThreshold=0_deg)</argsstring>
        <name>withOdometry</name>
        <param>
          <type>std::unique_ptr&lt; <ref refid="classokapi_1_1Odometry" kindref="compound">Odometry</ref> &gt;</type>
          <declname>iodometry</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceokapi_1af37fbd761bd859a00ff4dd4a87dd8c07" kindref="member">StateMode</ref> &amp;</type>
          <declname>imode</declname>
          <defval><ref refid="namespaceokapi_1af37fbd761bd859a00ff4dd4a87dd8c07ad5ed7666e5cebf60d3af20a5a46edf3b" kindref="member">StateMode::FRAME_TRANSFORMATION</ref></defval>
        </param>
        <param>
          <type>const QLength &amp;</type>
          <declname>imoveThreshold</declname>
          <defval>0_mm</defval>
        </param>
        <param>
          <type>const QAngle &amp;</type>
          <declname>iturnThreshold</declname>
          <defval>0_deg</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets the odometry information, causing the builder to generate an <ref refid="classokapi_1_1Odometry" kindref="compound">Odometry</ref> variant.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>iodometry</parametername>
</parameternamelist>
<parameterdescription>
<para>The odometry object. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>imode</parametername>
</parameternamelist>
<parameterdescription>
<para>The new default StateMode used to interpret target points and query the <ref refid="classokapi_1_1Odometry" kindref="compound">Odometry</ref> state. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>imoveThreshold</parametername>
</parameternamelist>
<parameterdescription>
<para>The minimum length movement. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>iturnThreshold</parametername>
</parameternamelist>
<parameterdescription>
<para>The minimum angle turn. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>An ongoing builder. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/okapi/impl/chassis/controller/chassisControllerBuilder.hpp" line="217" column="1" bodyfile="src/impl/chassis/controller/chassisControllerBuilder.cpp" bodystart="185" bodyend="200"/>
      </memberdef>
      <memberdef kind="function" id="classokapi_1_1ChassisControllerBuilder_1a4d65988fd98e4530dfa236fce6d4d99a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classokapi_1_1ChassisControllerBuilder" kindref="compound">ChassisControllerBuilder</ref> &amp;</type>
        <definition>ChassisControllerBuilder &amp; okapi::ChassisControllerBuilder::withDerivativeFilters</definition>
        <argsstring>(std::unique_ptr&lt; Filter &gt; idistanceFilter, std::unique_ptr&lt; Filter &gt; iturnFilter=std::make_unique&lt; PassthroughFilter &gt;(), std::unique_ptr&lt; Filter &gt; iangleFilter=std::make_unique&lt; PassthroughFilter &gt;())</argsstring>
        <name>withDerivativeFilters</name>
        <param>
          <type>std::unique_ptr&lt; <ref refid="classokapi_1_1Filter" kindref="compound">Filter</ref> &gt;</type>
          <declname>idistanceFilter</declname>
        </param>
        <param>
          <type>std::unique_ptr&lt; <ref refid="classokapi_1_1Filter" kindref="compound">Filter</ref> &gt;</type>
          <declname>iturnFilter</declname>
          <defval>std::make_unique&lt; <ref refid="classokapi_1_1PassthroughFilter" kindref="compound">PassthroughFilter</ref> &gt;()</defval>
        </param>
        <param>
          <type>std::unique_ptr&lt; <ref refid="classokapi_1_1Filter" kindref="compound">Filter</ref> &gt;</type>
          <declname>iangleFilter</declname>
          <defval>std::make_unique&lt; <ref refid="classokapi_1_1PassthroughFilter" kindref="compound">PassthroughFilter</ref> &gt;()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets the derivative filters. Uses a <ref refid="classokapi_1_1PassthroughFilter" kindref="compound">PassthroughFilter</ref> by default.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>idistanceFilter</parametername>
</parameternamelist>
<parameterdescription>
<para>The distance controller&apos;s filter. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>iturnFilter</parametername>
</parameternamelist>
<parameterdescription>
<para>The turn controller&apos;s filter. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>iangleFilter</parametername>
</parameternamelist>
<parameterdescription>
<para>The angle controller&apos;s filter. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>An ongoing builder. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/okapi/impl/chassis/controller/chassisControllerBuilder.hpp" line="230" column="1" bodyfile="src/impl/chassis/controller/chassisControllerBuilder.cpp" bodystart="162" bodyend="169"/>
      </memberdef>
      <memberdef kind="function" id="classokapi_1_1ChassisControllerBuilder_1aea1e3d32abede99a1b565205275aea78" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classokapi_1_1ChassisControllerBuilder" kindref="compound">ChassisControllerBuilder</ref> &amp;</type>
        <definition>ChassisControllerBuilder &amp; okapi::ChassisControllerBuilder::withGearset</definition>
        <argsstring>(const AbstractMotor::GearsetRatioPair &amp;igearset)</argsstring>
        <name>withGearset</name>
        <param>
          <type>const <ref refid="structokapi_1_1AbstractMotor_1_1GearsetRatioPair" kindref="compound">AbstractMotor::GearsetRatioPair</ref> &amp;</type>
          <declname>igearset</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets the gearset. The default gearset is derived from the motor&apos;s.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>igearset</parametername>
</parameternamelist>
<parameterdescription>
<para>The gearset. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>An ongoing builder. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/okapi/impl/chassis/controller/chassisControllerBuilder.hpp" line="241" column="1" bodyfile="src/impl/chassis/controller/chassisControllerBuilder.cpp" bodystart="203" bodyend="212"/>
      </memberdef>
      <memberdef kind="function" id="classokapi_1_1ChassisControllerBuilder_1a72a642f59112da74960942aae390a5ed" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classokapi_1_1ChassisControllerBuilder" kindref="compound">ChassisControllerBuilder</ref> &amp;</type>
        <definition>ChassisControllerBuilder &amp; okapi::ChassisControllerBuilder::withDimensions</definition>
        <argsstring>(const ChassisScales &amp;iscales)</argsstring>
        <name>withDimensions</name>
        <param>
          <type>const <ref refid="classokapi_1_1ChassisScales" kindref="compound">ChassisScales</ref> &amp;</type>
          <declname>iscales</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets the chassis dimensions.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>iscales</parametername>
</parameternamelist>
<parameterdescription>
<para>The dimensions. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>An ongoing builder. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/okapi/impl/chassis/controller/chassisControllerBuilder.hpp" line="249" column="1" bodyfile="src/impl/chassis/controller/chassisControllerBuilder.cpp" bodystart="214" bodyend="217"/>
      </memberdef>
      <memberdef kind="function" id="classokapi_1_1ChassisControllerBuilder_1aee0580c75bf16663f065aad88fdc795d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classokapi_1_1ChassisControllerBuilder" kindref="compound">ChassisControllerBuilder</ref> &amp;</type>
        <definition>ChassisControllerBuilder &amp; okapi::ChassisControllerBuilder::withMaxVelocity</definition>
        <argsstring>(double imaxVelocity)</argsstring>
        <name>withMaxVelocity</name>
        <param>
          <type>double</type>
          <declname>imaxVelocity</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets the max velocity. Overrides the max velocity of the gearset.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>imaxVelocity</parametername>
</parameternamelist>
<parameterdescription>
<para>The max velocity. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>An ongoing builder. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/okapi/impl/chassis/controller/chassisControllerBuilder.hpp" line="257" column="1" bodyfile="src/impl/chassis/controller/chassisControllerBuilder.cpp" bodystart="219" bodyend="223"/>
      </memberdef>
      <memberdef kind="function" id="classokapi_1_1ChassisControllerBuilder_1a7bf0a781b124ae39c8fc46786d18243a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classokapi_1_1ChassisControllerBuilder" kindref="compound">ChassisControllerBuilder</ref> &amp;</type>
        <definition>ChassisControllerBuilder &amp; okapi::ChassisControllerBuilder::withMaxVoltage</definition>
        <argsstring>(double imaxVoltage)</argsstring>
        <name>withMaxVoltage</name>
        <param>
          <type>double</type>
          <declname>imaxVoltage</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets the max voltage.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>imaxVoltage</parametername>
</parameternamelist>
<parameterdescription>
<para>The max voltage. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>An ongoing builder. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/okapi/impl/chassis/controller/chassisControllerBuilder.hpp" line="265" column="1" bodyfile="src/impl/chassis/controller/chassisControllerBuilder.cpp" bodystart="225" bodyend="228"/>
      </memberdef>
      <memberdef kind="function" id="classokapi_1_1ChassisControllerBuilder_1a1ca2919cbd6fa19b34aeaa1eeee98462" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classokapi_1_1ChassisControllerBuilder" kindref="compound">ChassisControllerBuilder</ref> &amp;</type>
        <definition>ChassisControllerBuilder &amp; okapi::ChassisControllerBuilder::withChassisControllerTimeUtilFactory</definition>
        <argsstring>(const TimeUtilFactory &amp;itimeUtilFactory)</argsstring>
        <name>withChassisControllerTimeUtilFactory</name>
        <param>
          <type>const <ref refid="classokapi_1_1TimeUtilFactory" kindref="compound">TimeUtilFactory</ref> &amp;</type>
          <declname>itimeUtilFactory</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets the <ref refid="classokapi_1_1TimeUtilFactory" kindref="compound">TimeUtilFactory</ref> used when building a <ref refid="classokapi_1_1ChassisController" kindref="compound">ChassisController</ref>. The default is the static <ref refid="classokapi_1_1TimeUtilFactory" kindref="compound">TimeUtilFactory</ref>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>itimeUtilFactory</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="classokapi_1_1TimeUtilFactory" kindref="compound">TimeUtilFactory</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>An ongoing builder. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/okapi/impl/chassis/controller/chassisControllerBuilder.hpp" line="275" column="1" bodyfile="src/impl/chassis/controller/chassisControllerBuilder.cpp" bodystart="230" bodyend="234"/>
      </memberdef>
      <memberdef kind="function" id="classokapi_1_1ChassisControllerBuilder_1a5bf13424f9357099d6e4d336cc0cec98" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classokapi_1_1ChassisControllerBuilder" kindref="compound">ChassisControllerBuilder</ref> &amp;</type>
        <definition>ChassisControllerBuilder &amp; okapi::ChassisControllerBuilder::withClosedLoopControllerTimeUtilFactory</definition>
        <argsstring>(const TimeUtilFactory &amp;itimeUtilFactory)</argsstring>
        <name>withClosedLoopControllerTimeUtilFactory</name>
        <param>
          <type>const <ref refid="classokapi_1_1TimeUtilFactory" kindref="compound">TimeUtilFactory</ref> &amp;</type>
          <declname>itimeUtilFactory</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets the <ref refid="classokapi_1_1TimeUtilFactory" kindref="compound">TimeUtilFactory</ref> used when building a <ref refid="classokapi_1_1ClosedLoopController" kindref="compound">ClosedLoopController</ref>. The default is the static <ref refid="classokapi_1_1TimeUtilFactory" kindref="compound">TimeUtilFactory</ref>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>itimeUtilFactory</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="classokapi_1_1TimeUtilFactory" kindref="compound">TimeUtilFactory</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>An ongoing builder. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/okapi/impl/chassis/controller/chassisControllerBuilder.hpp" line="285" column="1" bodyfile="src/impl/chassis/controller/chassisControllerBuilder.cpp" bodystart="236" bodyend="240"/>
      </memberdef>
      <memberdef kind="function" id="classokapi_1_1ChassisControllerBuilder_1ab601ad0881616b9af271d19c820ca3f2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classokapi_1_1ChassisControllerBuilder" kindref="compound">ChassisControllerBuilder</ref> &amp;</type>
        <definition>ChassisControllerBuilder &amp; okapi::ChassisControllerBuilder::withOdometryTimeUtilFactory</definition>
        <argsstring>(const TimeUtilFactory &amp;itimeUtilFactory)</argsstring>
        <name>withOdometryTimeUtilFactory</name>
        <param>
          <type>const <ref refid="classokapi_1_1TimeUtilFactory" kindref="compound">TimeUtilFactory</ref> &amp;</type>
          <declname>itimeUtilFactory</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets the <ref refid="classokapi_1_1TimeUtilFactory" kindref="compound">TimeUtilFactory</ref> used when building an <ref refid="classokapi_1_1Odometry" kindref="compound">Odometry</ref>. The default is the static <ref refid="classokapi_1_1TimeUtilFactory" kindref="compound">TimeUtilFactory</ref>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>itimeUtilFactory</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="classokapi_1_1TimeUtilFactory" kindref="compound">TimeUtilFactory</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>An ongoing builder. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/okapi/impl/chassis/controller/chassisControllerBuilder.hpp" line="294" column="1" bodyfile="src/impl/chassis/controller/chassisControllerBuilder.cpp" bodystart="243" bodyend="246"/>
      </memberdef>
      <memberdef kind="function" id="classokapi_1_1ChassisControllerBuilder_1ac2ba4b3f5a3b08e611ea21e0d9406250" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classokapi_1_1ChassisControllerBuilder" kindref="compound">ChassisControllerBuilder</ref> &amp;</type>
        <definition>ChassisControllerBuilder &amp; okapi::ChassisControllerBuilder::withLogger</definition>
        <argsstring>(const std::shared_ptr&lt; Logger &gt; &amp;ilogger)</argsstring>
        <name>withLogger</name>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="classokapi_1_1Logger" kindref="compound">Logger</ref> &gt; &amp;</type>
          <declname>ilogger</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets the logger used for the <ref refid="classokapi_1_1ChassisController" kindref="compound">ChassisController</ref> and ClosedLoopControllers.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ilogger</parametername>
</parameternamelist>
<parameterdescription>
<para>The logger. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>An ongoing builder. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/okapi/impl/chassis/controller/chassisControllerBuilder.hpp" line="302" column="1" bodyfile="src/impl/chassis/controller/chassisControllerBuilder.cpp" bodystart="249" bodyend="252"/>
      </memberdef>
      <memberdef kind="function" id="classokapi_1_1ChassisControllerBuilder_1a5dfd1f4d60a3c4bfcc28a57211c1a6a2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="classokapi_1_1ChassisController" kindref="compound">ChassisController</ref> &gt;</type>
        <definition>std::shared_ptr&lt; ChassisController &gt; okapi::ChassisControllerBuilder::build</definition>
        <argsstring>()</argsstring>
        <name>build</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Builds the <ref refid="classokapi_1_1ChassisController" kindref="compound">ChassisController</ref>. Throws a std::runtime_exception if no motors were set.</para>
<para><simplesect kind="return"><para>A fully built <ref refid="classokapi_1_1ChassisController" kindref="compound">ChassisController</ref>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/okapi/impl/chassis/controller/chassisControllerBuilder.hpp" line="309" column="1" bodyfile="src/impl/chassis/controller/chassisControllerBuilder.cpp" bodystart="254" bodyend="273"/>
      </memberdef>
      <memberdef kind="function" id="classokapi_1_1ChassisControllerBuilder_1a9c631ea817466483aa2cfcb886f6d892" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="classokapi_1_1OdomChassisController" kindref="compound">OdomChassisController</ref> &gt;</type>
        <definition>std::shared_ptr&lt; OdomChassisController &gt; okapi::ChassisControllerBuilder::buildOdometry</definition>
        <argsstring>()</argsstring>
        <name>buildOdometry</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Builds the <ref refid="classokapi_1_1OdomChassisController" kindref="compound">OdomChassisController</ref>. Throws a std::runtime_exception if no motors were set or if no odometry information was passed.</para>
<para><simplesect kind="return"><para>A fully built <ref refid="classokapi_1_1OdomChassisController" kindref="compound">OdomChassisController</ref>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/okapi/impl/chassis/controller/chassisControllerBuilder.hpp" line="317" column="1" bodyfile="src/impl/chassis/controller/chassisControllerBuilder.cpp" bodystart="275" bodyend="283"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classokapi_1_1ChassisControllerBuilder_1ad8fdecc83325f6fcaaa398b5f5903a47" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="classokapi_1_1ChassisControllerPID" kindref="compound">ChassisControllerPID</ref> &gt;</type>
        <definition>std::shared_ptr&lt; ChassisControllerPID &gt; okapi::ChassisControllerBuilder::buildCCPID</definition>
        <argsstring>()</argsstring>
        <name>buildCCPID</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/okapi/impl/chassis/controller/chassisControllerBuilder.hpp" line="372" column="1" bodyfile="src/impl/chassis/controller/chassisControllerBuilder.cpp" bodystart="324" bodyend="374"/>
      </memberdef>
      <memberdef kind="function" id="classokapi_1_1ChassisControllerBuilder_1a458e452597a6b3039460884e5c259cc9" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="classokapi_1_1ChassisControllerIntegrated" kindref="compound">ChassisControllerIntegrated</ref> &gt;</type>
        <definition>std::shared_ptr&lt; ChassisControllerIntegrated &gt; okapi::ChassisControllerBuilder::buildCCI</definition>
        <argsstring>()</argsstring>
        <name>buildCCI</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/okapi/impl/chassis/controller/chassisControllerBuilder.hpp" line="373" column="1" bodyfile="src/impl/chassis/controller/chassisControllerBuilder.cpp" bodystart="376" bodyend="417"/>
      </memberdef>
      <memberdef kind="function" id="classokapi_1_1ChassisControllerBuilder_1a59ca56b8cdfc06feb3effba2e930bd30" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="classokapi_1_1DefaultOdomChassisController" kindref="compound">DefaultOdomChassisController</ref> &gt;</type>
        <definition>std::shared_ptr&lt; DefaultOdomChassisController &gt; okapi::ChassisControllerBuilder::buildDOCC</definition>
        <argsstring>(std::shared_ptr&lt; ChassisController &gt; chassisController)</argsstring>
        <name>buildDOCC</name>
        <param>
          <type>std::shared_ptr&lt; <ref refid="classokapi_1_1ChassisController" kindref="compound">ChassisController</ref> &gt;</type>
          <declname>chassisController</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/okapi/impl/chassis/controller/chassisControllerBuilder.hpp" line="375" column="1" bodyfile="src/impl/chassis/controller/chassisControllerBuilder.cpp" bodystart="286" bodyend="322"/>
      </memberdef>
      <memberdef kind="function" id="classokapi_1_1ChassisControllerBuilder_1afbd17479cb1d5a0d2a325e58efc875cf" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="classokapi_1_1SkidSteerModel" kindref="compound">SkidSteerModel</ref> &gt;</type>
        <definition>std::shared_ptr&lt; SkidSteerModel &gt; okapi::ChassisControllerBuilder::makeSkidSteerModel</definition>
        <argsstring>()</argsstring>
        <name>makeSkidSteerModel</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/okapi/impl/chassis/controller/chassisControllerBuilder.hpp" line="376" column="1" bodyfile="src/impl/chassis/controller/chassisControllerBuilder.cpp" bodystart="419" bodyend="436"/>
      </memberdef>
      <memberdef kind="function" id="classokapi_1_1ChassisControllerBuilder_1a91e6ac3df8c0933acfaa9c2706339d03" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="classokapi_1_1XDriveModel" kindref="compound">XDriveModel</ref> &gt;</type>
        <definition>std::shared_ptr&lt; XDriveModel &gt; okapi::ChassisControllerBuilder::makeXDriveModel</definition>
        <argsstring>()</argsstring>
        <name>makeXDriveModel</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/okapi/impl/chassis/controller/chassisControllerBuilder.hpp" line="377" column="1" bodyfile="src/impl/chassis/controller/chassisControllerBuilder.cpp" bodystart="438" bodyend="447"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="include/okapi/impl/chassis/controller/chassisControllerBuilder.hpp" line="24" column="1" bodyfile="include/okapi/impl/chassis/controller/chassisControllerBuilder.hpp" bodystart="24" bodyend="378"/>
    <listofallmembers>
      <member refid="classokapi_1_1ChassisControllerBuilder_1a858691f337b15633addeaa74c5216781" prot="private" virt="non-virtual"><scope>okapi::ChassisControllerBuilder</scope><name>angleFilter</name></member>
      <member refid="classokapi_1_1ChassisControllerBuilder_1a5132d236df76456df79e5b86bbf03a3a" prot="private" virt="non-virtual"><scope>okapi::ChassisControllerBuilder</scope><name>angleGains</name></member>
      <member refid="classokapi_1_1ChassisControllerBuilder_1a5dfd1f4d60a3c4bfcc28a57211c1a6a2" prot="public" virt="non-virtual"><scope>okapi::ChassisControllerBuilder</scope><name>build</name></member>
      <member refid="classokapi_1_1ChassisControllerBuilder_1a458e452597a6b3039460884e5c259cc9" prot="private" virt="non-virtual"><scope>okapi::ChassisControllerBuilder</scope><name>buildCCI</name></member>
      <member refid="classokapi_1_1ChassisControllerBuilder_1ad8fdecc83325f6fcaaa398b5f5903a47" prot="private" virt="non-virtual"><scope>okapi::ChassisControllerBuilder</scope><name>buildCCPID</name></member>
      <member refid="classokapi_1_1ChassisControllerBuilder_1a59ca56b8cdfc06feb3effba2e930bd30" prot="private" virt="non-virtual"><scope>okapi::ChassisControllerBuilder</scope><name>buildDOCC</name></member>
      <member refid="classokapi_1_1ChassisControllerBuilder_1a9c631ea817466483aa2cfcb886f6d892" prot="public" virt="non-virtual"><scope>okapi::ChassisControllerBuilder</scope><name>buildOdometry</name></member>
      <member refid="classokapi_1_1ChassisControllerBuilder_1a47e82afd7b6f3e3076d153e6130820ed" prot="public" virt="non-virtual"><scope>okapi::ChassisControllerBuilder</scope><name>ChassisControllerBuilder</name></member>
      <member refid="classokapi_1_1ChassisControllerBuilder_1a9fedf30fa7246f8bf8983452f397eb5a" prot="private" virt="non-virtual"><scope>okapi::ChassisControllerBuilder</scope><name>chassisControllerTimeUtilFactory</name></member>
      <member refid="classokapi_1_1ChassisControllerBuilder_1a03255e77dec235d4af3818db91f9552e" prot="private" virt="non-virtual"><scope>okapi::ChassisControllerBuilder</scope><name>closedLoopControllerTimeUtilFactory</name></member>
      <member refid="classokapi_1_1ChassisControllerBuilder_1a96418cbd1647eaa4cb9ba8873636a099" prot="private" virt="non-virtual"><scope>okapi::ChassisControllerBuilder</scope><name>controllerLogger</name></member>
      <member refid="classokapi_1_1ChassisControllerBuilder_1ae34e148843009d4bee269fa3d5c01822" prot="private" virt="non-virtual"><scope>okapi::ChassisControllerBuilder</scope><name>distanceFilter</name></member>
      <member refid="classokapi_1_1ChassisControllerBuilder_1adb9a3cbebf17222eaf1005d4fff12e3e" prot="private" virt="non-virtual"><scope>okapi::ChassisControllerBuilder</scope><name>distanceGains</name></member>
      <member refid="classokapi_1_1ChassisControllerBuilder_1a7fd82a0f66755a69f05085ad0adacf94" prot="private" virt="non-virtual"><scope>okapi::ChassisControllerBuilder</scope><name>gearset</name></member>
      <member refid="classokapi_1_1ChassisControllerBuilder_1ae72db959b82de5f1e63e999d771f2f54" prot="private" virt="non-virtual"><scope>okapi::ChassisControllerBuilder</scope><name>gearsetSetByUser</name></member>
      <member refid="classokapi_1_1ChassisControllerBuilder_1a6b5ce773a30ee1f27981a5dce462a497" prot="private" virt="non-virtual"><scope>okapi::ChassisControllerBuilder</scope><name>hasGains</name></member>
      <member refid="classokapi_1_1ChassisControllerBuilder_1a4b06388f38adaef235363d37cee44c52" prot="private" virt="non-virtual"><scope>okapi::ChassisControllerBuilder</scope><name>hasMotors</name></member>
      <member refid="classokapi_1_1ChassisControllerBuilder_1a74333ef2f6930e2bb82b6e0a92d06a16" prot="private" virt="non-virtual"><scope>okapi::ChassisControllerBuilder</scope><name>hasOdom</name></member>
      <member refid="classokapi_1_1ChassisControllerBuilder_1a36381bf3a669d3a9005ec5711066f50c" prot="private" virt="non-virtual"><scope>okapi::ChassisControllerBuilder</scope><name>isSkidSteer</name></member>
      <member refid="classokapi_1_1ChassisControllerBuilder_1a1d8a95522515e72681c521084936168c" prot="private" virt="non-virtual"><scope>okapi::ChassisControllerBuilder</scope><name>leftSensor</name></member>
      <member refid="classokapi_1_1ChassisControllerBuilder_1ad4e3dd96b691533fe2d18c907efd0a49" prot="private" virt="non-virtual"><scope>okapi::ChassisControllerBuilder</scope><name>logger</name></member>
      <member refid="classokapi_1_1ChassisControllerBuilder_1afbd17479cb1d5a0d2a325e58efc875cf" prot="private" virt="non-virtual"><scope>okapi::ChassisControllerBuilder</scope><name>makeSkidSteerModel</name></member>
      <member refid="classokapi_1_1ChassisControllerBuilder_1a91e6ac3df8c0933acfaa9c2706339d03" prot="private" virt="non-virtual"><scope>okapi::ChassisControllerBuilder</scope><name>makeXDriveModel</name></member>
      <member refid="classokapi_1_1ChassisControllerBuilder_1a5e3cd2bf5f2d89f048e00f40d5e2531e" prot="private" virt="non-virtual"><scope>okapi::ChassisControllerBuilder</scope><name>maxVelocity</name></member>
      <member refid="classokapi_1_1ChassisControllerBuilder_1a6a706383d723514c42935f274633e49b" prot="private" virt="non-virtual"><scope>okapi::ChassisControllerBuilder</scope><name>maxVelSetByUser</name></member>
      <member refid="classokapi_1_1ChassisControllerBuilder_1a7d1d01e772c46fa5364a1c869c72a83c" prot="private" virt="non-virtual"><scope>okapi::ChassisControllerBuilder</scope><name>maxVoltage</name></member>
      <member refid="classokapi_1_1ChassisControllerBuilder_1aa0a5339fc78a570270aef05a81d5ff95" prot="private" virt="non-virtual"><scope>okapi::ChassisControllerBuilder</scope><name>middleSensor</name></member>
      <member refid="classokapi_1_1ChassisControllerBuilder_1a4770676e616026ac4215399cae91c4ae" prot="private" virt="non-virtual"><scope>okapi::ChassisControllerBuilder</scope><name>moveThreshold</name></member>
      <member refid="classokapi_1_1ChassisControllerBuilder_1a8d65c7b9461a392e607552d6e6fd1142" prot="private" virt="non-virtual"><scope>okapi::ChassisControllerBuilder</scope><name>odometry</name></member>
      <member refid="classokapi_1_1ChassisControllerBuilder_1ab690d2a35c51cdd4f14a6a0a6e4d1ba1" prot="private" virt="non-virtual"><scope>okapi::ChassisControllerBuilder</scope><name>odometryTimeUtilFactory</name></member>
      <member refid="classokapi_1_1ChassisControllerBuilder_1a4d6c6037aa312ed880d5d7d618a38eaa" prot="private" virt="non-virtual"><scope>okapi::ChassisControllerBuilder</scope><name>rightSensor</name></member>
      <member refid="classokapi_1_1ChassisControllerBuilder_1aef80b3a024b83fb94da6f31c283e81ac" prot="private" virt="non-virtual"><scope>okapi::ChassisControllerBuilder</scope><name>scales</name></member>
      <member refid="classokapi_1_1ChassisControllerBuilder_1a82c45aeb7427b1ddaca0f2ff2edbcf3f" prot="private" virt="non-virtual"><scope>okapi::ChassisControllerBuilder</scope><name>sensorsSetByUser</name></member>
      <member refid="classokapi_1_1ChassisControllerBuilder_1a7cdc148f76862392b61422bf29a4c950" prot="private" virt="non-virtual"><scope>okapi::ChassisControllerBuilder</scope><name>skidSteerMotors</name></member>
      <member refid="classokapi_1_1ChassisControllerBuilder_1a005e5a409f953b868803be52662e943a" prot="private" virt="non-virtual"><scope>okapi::ChassisControllerBuilder</scope><name>stateMode</name></member>
      <member refid="classokapi_1_1ChassisControllerBuilder_1af9e3c44dcee065ead44d0ecc145cdc68" prot="private" virt="non-virtual"><scope>okapi::ChassisControllerBuilder</scope><name>turnFilter</name></member>
      <member refid="classokapi_1_1ChassisControllerBuilder_1a660e0fe40e8dfbd505b60c094da9b272" prot="private" virt="non-virtual"><scope>okapi::ChassisControllerBuilder</scope><name>turnGains</name></member>
      <member refid="classokapi_1_1ChassisControllerBuilder_1abfdae072e6f6178926cdc93935f8114b" prot="private" virt="non-virtual"><scope>okapi::ChassisControllerBuilder</scope><name>turnThreshold</name></member>
      <member refid="classokapi_1_1ChassisControllerBuilder_1af4167e100fc835a034b26f9f091f58f6" prot="private" virt="non-virtual"><scope>okapi::ChassisControllerBuilder</scope><name>wheelVelDelta</name></member>
      <member refid="classokapi_1_1ChassisControllerBuilder_1a1ca2919cbd6fa19b34aeaa1eeee98462" prot="public" virt="non-virtual"><scope>okapi::ChassisControllerBuilder</scope><name>withChassisControllerTimeUtilFactory</name></member>
      <member refid="classokapi_1_1ChassisControllerBuilder_1a5bf13424f9357099d6e4d336cc0cec98" prot="public" virt="non-virtual"><scope>okapi::ChassisControllerBuilder</scope><name>withClosedLoopControllerTimeUtilFactory</name></member>
      <member refid="classokapi_1_1ChassisControllerBuilder_1a4d65988fd98e4530dfa236fce6d4d99a" prot="public" virt="non-virtual"><scope>okapi::ChassisControllerBuilder</scope><name>withDerivativeFilters</name></member>
      <member refid="classokapi_1_1ChassisControllerBuilder_1a72a642f59112da74960942aae390a5ed" prot="public" virt="non-virtual"><scope>okapi::ChassisControllerBuilder</scope><name>withDimensions</name></member>
      <member refid="classokapi_1_1ChassisControllerBuilder_1ac7b348a81cda8897540db92f14d1d8e3" prot="public" virt="non-virtual"><scope>okapi::ChassisControllerBuilder</scope><name>withGains</name></member>
      <member refid="classokapi_1_1ChassisControllerBuilder_1a4fa2d56589f5a4c8e69b36238bc3f4de" prot="public" virt="non-virtual"><scope>okapi::ChassisControllerBuilder</scope><name>withGains</name></member>
      <member refid="classokapi_1_1ChassisControllerBuilder_1aea1e3d32abede99a1b565205275aea78" prot="public" virt="non-virtual"><scope>okapi::ChassisControllerBuilder</scope><name>withGearset</name></member>
      <member refid="classokapi_1_1ChassisControllerBuilder_1ac2ba4b3f5a3b08e611ea21e0d9406250" prot="public" virt="non-virtual"><scope>okapi::ChassisControllerBuilder</scope><name>withLogger</name></member>
      <member refid="classokapi_1_1ChassisControllerBuilder_1aee0580c75bf16663f065aad88fdc795d" prot="public" virt="non-virtual"><scope>okapi::ChassisControllerBuilder</scope><name>withMaxVelocity</name></member>
      <member refid="classokapi_1_1ChassisControllerBuilder_1a7bf0a781b124ae39c8fc46786d18243a" prot="public" virt="non-virtual"><scope>okapi::ChassisControllerBuilder</scope><name>withMaxVoltage</name></member>
      <member refid="classokapi_1_1ChassisControllerBuilder_1a1ceb7c4b4f0ccfd37a92d8ffd64fa64e" prot="public" virt="non-virtual"><scope>okapi::ChassisControllerBuilder</scope><name>withMotors</name></member>
      <member refid="classokapi_1_1ChassisControllerBuilder_1a98b304ce096222c0f3af8105ab61ee71" prot="public" virt="non-virtual"><scope>okapi::ChassisControllerBuilder</scope><name>withMotors</name></member>
      <member refid="classokapi_1_1ChassisControllerBuilder_1a4482565290d9433bff4dc6c48543e334" prot="public" virt="non-virtual"><scope>okapi::ChassisControllerBuilder</scope><name>withMotors</name></member>
      <member refid="classokapi_1_1ChassisControllerBuilder_1a0d0a144c1b600aa90cf19b6a76a7dd04" prot="public" virt="non-virtual"><scope>okapi::ChassisControllerBuilder</scope><name>withMotors</name></member>
      <member refid="classokapi_1_1ChassisControllerBuilder_1a5f8ddcfcd9c00fc205c1ec0536db3118" prot="public" virt="non-virtual"><scope>okapi::ChassisControllerBuilder</scope><name>withMotors</name></member>
      <member refid="classokapi_1_1ChassisControllerBuilder_1a423ebf033857cae3bfcf5542db6dffd2" prot="public" virt="non-virtual"><scope>okapi::ChassisControllerBuilder</scope><name>withMotors</name></member>
      <member refid="classokapi_1_1ChassisControllerBuilder_1aa4686900014387dbc3b335ee813c3ead" prot="public" virt="non-virtual"><scope>okapi::ChassisControllerBuilder</scope><name>withOdometry</name></member>
      <member refid="classokapi_1_1ChassisControllerBuilder_1aa775099a284db24e6832022668d0a344" prot="public" virt="non-virtual"><scope>okapi::ChassisControllerBuilder</scope><name>withOdometry</name></member>
      <member refid="classokapi_1_1ChassisControllerBuilder_1ab601ad0881616b9af271d19c820ca3f2" prot="public" virt="non-virtual"><scope>okapi::ChassisControllerBuilder</scope><name>withOdometryTimeUtilFactory</name></member>
      <member refid="classokapi_1_1ChassisControllerBuilder_1a0197aa35c2c36dd82476bc70c5824a56" prot="public" virt="non-virtual"><scope>okapi::ChassisControllerBuilder</scope><name>withSensors</name></member>
      <member refid="classokapi_1_1ChassisControllerBuilder_1a5733a2198a3f10befcae5ee2a9a02d7e" prot="public" virt="non-virtual"><scope>okapi::ChassisControllerBuilder</scope><name>withSensors</name></member>
      <member refid="classokapi_1_1ChassisControllerBuilder_1adcc6c5e490cd2f51e319bd52f40b1d3f" prot="public" virt="non-virtual"><scope>okapi::ChassisControllerBuilder</scope><name>withSensors</name></member>
      <member refid="classokapi_1_1ChassisControllerBuilder_1a9ba0a2bf4c4d0334f96bd08b08144cc3" prot="public" virt="non-virtual"><scope>okapi::ChassisControllerBuilder</scope><name>withSensors</name></member>
      <member refid="classokapi_1_1ChassisControllerBuilder_1a10214db4bffeb20b0e7b3d5c956061fa" prot="public" virt="non-virtual"><scope>okapi::ChassisControllerBuilder</scope><name>withSensors</name></member>
      <member refid="classokapi_1_1ChassisControllerBuilder_1a2c2d1276f03425ecbe97b55ce8832d9e" prot="public" virt="non-virtual"><scope>okapi::ChassisControllerBuilder</scope><name>withSensors</name></member>
      <member refid="classokapi_1_1ChassisControllerBuilder_1a2c58d1ee214a1854e8be3d9c4a31f7a9" prot="private" virt="non-virtual"><scope>okapi::ChassisControllerBuilder</scope><name>xDriveMotors</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
