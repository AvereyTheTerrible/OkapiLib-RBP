<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="classokapi_1_1IterativeControllerFactory" kind="class" language="C++" prot="public">
    <compoundname>okapi::IterativeControllerFactory</compoundname>
    <includes refid="iterativeControllerFactory_8hpp" local="no">iterativeControllerFactory.hpp</includes>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classokapi_1_1IterativeControllerFactory_1a2ff979d01d67cee2c0d86b07690a8081" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classokapi_1_1IterativePosPIDController" kindref="compound">IterativePosPIDController</ref></type>
        <definition>IterativePosPIDController okapi::IterativeControllerFactory::posPID</definition>
        <argsstring>(double ikP, double ikI, double ikD, double ikBias=0, std::unique_ptr&lt; Filter &gt; iderivativeFilter=std::make_unique&lt; PassthroughFilter &gt;(), const std::shared_ptr&lt; Logger &gt; &amp;ilogger=Logger::getDefaultLogger())</argsstring>
        <name>posPID</name>
        <param>
          <type>double</type>
          <declname>ikP</declname>
        </param>
        <param>
          <type>double</type>
          <declname>ikI</declname>
        </param>
        <param>
          <type>double</type>
          <declname>ikD</declname>
        </param>
        <param>
          <type>double</type>
          <declname>ikBias</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>std::unique_ptr&lt; <ref refid="classokapi_1_1Filter" kindref="compound">Filter</ref> &gt;</type>
          <declname>iderivativeFilter</declname>
          <defval>std::make_unique&lt; <ref refid="classokapi_1_1PassthroughFilter" kindref="compound">PassthroughFilter</ref> &gt;()</defval>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="classokapi_1_1Logger" kindref="compound">Logger</ref> &gt; &amp;</type>
          <declname>ilogger</declname>
          <defval><ref refid="classokapi_1_1Logger_1a5053cf778b4b55acba788a3797dc96d2" kindref="member">Logger::getDefaultLogger</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Position PID controller.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ikP</parametername>
</parameternamelist>
<parameterdescription>
<para>proportional gain </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ikI</parametername>
</parameternamelist>
<parameterdescription>
<para>integral gain </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ikD</parametername>
</parameternamelist>
<parameterdescription>
<para>derivative gain </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ikBias</parametername>
</parameternamelist>
<parameterdescription>
<para>controller bias (constant offset added to the output) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>iderivativeFilter</parametername>
</parameternamelist>
<parameterdescription>
<para>A filter for filtering the derivative term. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ilogger</parametername>
</parameternamelist>
<parameterdescription>
<para>The logger this instance will log to. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/okapi/impl/control/iterative/iterativeControllerFactory.hpp" line="32" column="1" bodyfile="src/impl/control/iterative/iterativeControllerFactory.cpp" bodystart="13" bodyend="21"/>
      </memberdef>
      <memberdef kind="function" id="classokapi_1_1IterativeControllerFactory_1a7b9d88febe596e3fd11eca8a91f2c05c" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classokapi_1_1IterativeVelPIDController" kindref="compound">IterativeVelPIDController</ref></type>
        <definition>IterativeVelPIDController okapi::IterativeControllerFactory::velPID</definition>
        <argsstring>(double ikP, double ikD, double ikF=0, double ikSF=0, std::unique_ptr&lt; VelMath &gt; ivelMath=VelMathFactory::createPtr(imev5GreenTPR), std::unique_ptr&lt; Filter &gt; iderivativeFilter=std::make_unique&lt; PassthroughFilter &gt;(), const std::shared_ptr&lt; Logger &gt; &amp;ilogger=Logger::getDefaultLogger())</argsstring>
        <name>velPID</name>
        <param>
          <type>double</type>
          <declname>ikP</declname>
        </param>
        <param>
          <type>double</type>
          <declname>ikD</declname>
        </param>
        <param>
          <type>double</type>
          <declname>ikF</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>double</type>
          <declname>ikSF</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>std::unique_ptr&lt; <ref refid="classokapi_1_1VelMath" kindref="compound">VelMath</ref> &gt;</type>
          <declname>ivelMath</declname>
          <defval><ref refid="classokapi_1_1VelMathFactory_1a26b75e227e114812131c64d17015948f" kindref="member">VelMathFactory::createPtr</ref>(<ref refid="namespaceokapi_1a5263bab3bfecd482a573b6d04fb584ac" kindref="member">imev5GreenTPR</ref>)</defval>
        </param>
        <param>
          <type>std::unique_ptr&lt; <ref refid="classokapi_1_1Filter" kindref="compound">Filter</ref> &gt;</type>
          <declname>iderivativeFilter</declname>
          <defval>std::make_unique&lt; <ref refid="classokapi_1_1PassthroughFilter" kindref="compound">PassthroughFilter</ref> &gt;()</defval>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="classokapi_1_1Logger" kindref="compound">Logger</ref> &gt; &amp;</type>
          <declname>ilogger</declname>
          <defval><ref refid="classokapi_1_1Logger_1a5053cf778b4b55acba788a3797dc96d2" kindref="member">Logger::getDefaultLogger</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Velocity PD controller.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ikP</parametername>
</parameternamelist>
<parameterdescription>
<para>proportional gain </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ikD</parametername>
</parameternamelist>
<parameterdescription>
<para>derivative gain </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ikF</parametername>
</parameternamelist>
<parameterdescription>
<para>feed-forward gain </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ikSF</parametername>
</parameternamelist>
<parameterdescription>
<para>a feed-forward gain to counteract static friction </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>iderivativeFilter</parametername>
</parameternamelist>
<parameterdescription>
<para>A filter for filtering the derivative term. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ilogger</parametername>
</parameternamelist>
<parameterdescription>
<para>The logger this instance will log to. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/okapi/impl/control/iterative/iterativeControllerFactory.hpp" line="50" column="1" bodyfile="src/impl/control/iterative/iterativeControllerFactory.cpp" bodystart="24" bodyend="39"/>
      </memberdef>
      <memberdef kind="function" id="classokapi_1_1IterativeControllerFactory_1a55d93373ed17166b0f5747a76690d1de" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classokapi_1_1IterativeMotorVelocityController" kindref="compound">IterativeMotorVelocityController</ref></type>
        <definition>IterativeMotorVelocityController okapi::IterativeControllerFactory::motorVelocity</definition>
        <argsstring>(Motor imotor, double ikP, double ikD, double ikF=0, double ikSF=0, std::unique_ptr&lt; VelMath &gt; ivelMath=VelMathFactory::createPtr(imev5GreenTPR), std::unique_ptr&lt; Filter &gt; iderivativeFilter=std::make_unique&lt; PassthroughFilter &gt;(), const std::shared_ptr&lt; Logger &gt; &amp;ilogger=Logger::getDefaultLogger())</argsstring>
        <name>motorVelocity</name>
        <param>
          <type><ref refid="classokapi_1_1Motor" kindref="compound">Motor</ref></type>
          <declname>imotor</declname>
        </param>
        <param>
          <type>double</type>
          <declname>ikP</declname>
        </param>
        <param>
          <type>double</type>
          <declname>ikD</declname>
        </param>
        <param>
          <type>double</type>
          <declname>ikF</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>double</type>
          <declname>ikSF</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>std::unique_ptr&lt; <ref refid="classokapi_1_1VelMath" kindref="compound">VelMath</ref> &gt;</type>
          <declname>ivelMath</declname>
          <defval><ref refid="classokapi_1_1VelMathFactory_1a26b75e227e114812131c64d17015948f" kindref="member">VelMathFactory::createPtr</ref>(<ref refid="namespaceokapi_1a5263bab3bfecd482a573b6d04fb584ac" kindref="member">imev5GreenTPR</ref>)</defval>
        </param>
        <param>
          <type>std::unique_ptr&lt; <ref refid="classokapi_1_1Filter" kindref="compound">Filter</ref> &gt;</type>
          <declname>iderivativeFilter</declname>
          <defval>std::make_unique&lt; <ref refid="classokapi_1_1PassthroughFilter" kindref="compound">PassthroughFilter</ref> &gt;()</defval>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="classokapi_1_1Logger" kindref="compound">Logger</ref> &gt; &amp;</type>
          <declname>ilogger</declname>
          <defval><ref refid="classokapi_1_1Logger_1a5053cf778b4b55acba788a3797dc96d2" kindref="member">Logger::getDefaultLogger</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Velocity PD controller that automatically writes to the motor.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>imotor</parametername>
</parameternamelist>
<parameterdescription>
<para>output motor </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ikP</parametername>
</parameternamelist>
<parameterdescription>
<para>proportional gain </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ikD</parametername>
</parameternamelist>
<parameterdescription>
<para>derivative gain </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ikF</parametername>
</parameternamelist>
<parameterdescription>
<para>feed-forward gain </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ikSF</parametername>
</parameternamelist>
<parameterdescription>
<para>a feed-forward gain to counteract static friction </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ivelMath</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="classokapi_1_1VelMath" kindref="compound">VelMath</ref>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>iderivativeFilter</parametername>
</parameternamelist>
<parameterdescription>
<para>A filter for filtering the derivative term. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ilogger</parametername>
</parameternamelist>
<parameterdescription>
<para>The logger this instance will log to. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/okapi/impl/control/iterative/iterativeControllerFactory.hpp" line="71" column="1" bodyfile="src/impl/control/iterative/iterativeControllerFactory.cpp" bodystart="42" bodyend="54"/>
      </memberdef>
      <memberdef kind="function" id="classokapi_1_1IterativeControllerFactory_1a5227fff05674d0165c02e02730a2a4c6" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classokapi_1_1IterativeMotorVelocityController" kindref="compound">IterativeMotorVelocityController</ref></type>
        <definition>IterativeMotorVelocityController okapi::IterativeControllerFactory::motorVelocity</definition>
        <argsstring>(MotorGroup imotor, double ikP, double ikD, double ikF=0, double ikSF=0, std::unique_ptr&lt; VelMath &gt; ivelMath=VelMathFactory::createPtr(imev5GreenTPR), std::unique_ptr&lt; Filter &gt; iderivativeFilter=std::make_unique&lt; PassthroughFilter &gt;(), const std::shared_ptr&lt; Logger &gt; &amp;ilogger=Logger::getDefaultLogger())</argsstring>
        <name>motorVelocity</name>
        <param>
          <type><ref refid="classokapi_1_1MotorGroup" kindref="compound">MotorGroup</ref></type>
          <declname>imotor</declname>
        </param>
        <param>
          <type>double</type>
          <declname>ikP</declname>
        </param>
        <param>
          <type>double</type>
          <declname>ikD</declname>
        </param>
        <param>
          <type>double</type>
          <declname>ikF</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>double</type>
          <declname>ikSF</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>std::unique_ptr&lt; <ref refid="classokapi_1_1VelMath" kindref="compound">VelMath</ref> &gt;</type>
          <declname>ivelMath</declname>
          <defval><ref refid="classokapi_1_1VelMathFactory_1a26b75e227e114812131c64d17015948f" kindref="member">VelMathFactory::createPtr</ref>(<ref refid="namespaceokapi_1a5263bab3bfecd482a573b6d04fb584ac" kindref="member">imev5GreenTPR</ref>)</defval>
        </param>
        <param>
          <type>std::unique_ptr&lt; <ref refid="classokapi_1_1Filter" kindref="compound">Filter</ref> &gt;</type>
          <declname>iderivativeFilter</declname>
          <defval>std::make_unique&lt; <ref refid="classokapi_1_1PassthroughFilter" kindref="compound">PassthroughFilter</ref> &gt;()</defval>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="classokapi_1_1Logger" kindref="compound">Logger</ref> &gt; &amp;</type>
          <declname>ilogger</declname>
          <defval><ref refid="classokapi_1_1Logger_1a5053cf778b4b55acba788a3797dc96d2" kindref="member">Logger::getDefaultLogger</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Velocity PD controller that automatically writes to the motor.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>imotor</parametername>
</parameternamelist>
<parameterdescription>
<para>output motor </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ikP</parametername>
</parameternamelist>
<parameterdescription>
<para>proportional gain </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ikD</parametername>
</parameternamelist>
<parameterdescription>
<para>derivative gain </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ikF</parametername>
</parameternamelist>
<parameterdescription>
<para>feed-forward gain </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ikSF</parametername>
</parameternamelist>
<parameterdescription>
<para>a feed-forward gain to counteract static friction </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ivelMath</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="classokapi_1_1VelMath" kindref="compound">VelMath</ref>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>iderivativeFilter</parametername>
</parameternamelist>
<parameterdescription>
<para>A filter for filtering the derivative term. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ilogger</parametername>
</parameternamelist>
<parameterdescription>
<para>The logger this instance will log to. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/okapi/impl/control/iterative/iterativeControllerFactory.hpp" line="93" column="1" bodyfile="src/impl/control/iterative/iterativeControllerFactory.cpp" bodystart="57" bodyend="69"/>
      </memberdef>
      <memberdef kind="function" id="classokapi_1_1IterativeControllerFactory_1a10580d88f6c4d2f4b7355068c1ab3def" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classokapi_1_1IterativeMotorVelocityController" kindref="compound">IterativeMotorVelocityController</ref></type>
        <definition>IterativeMotorVelocityController okapi::IterativeControllerFactory::motorVelocity</definition>
        <argsstring>(Motor imotor, std::shared_ptr&lt; IterativeVelocityController&lt; double, double &gt;&gt; icontroller)</argsstring>
        <name>motorVelocity</name>
        <param>
          <type><ref refid="classokapi_1_1Motor" kindref="compound">Motor</ref></type>
          <declname>imotor</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; <ref refid="classokapi_1_1IterativeVelocityController" kindref="compound">IterativeVelocityController</ref>&lt; double, double &gt;&gt;</type>
          <declname>icontroller</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Velocity PD controller that automatically writes to the motor.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>imotor</parametername>
</parameternamelist>
<parameterdescription>
<para>output motor </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>icontroller</parametername>
</parameternamelist>
<parameterdescription>
<para>controller to use </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/okapi/impl/control/iterative/iterativeControllerFactory.hpp" line="109" column="1" bodyfile="src/impl/control/iterative/iterativeControllerFactory.cpp" bodystart="71" bodyend="75"/>
      </memberdef>
      <memberdef kind="function" id="classokapi_1_1IterativeControllerFactory_1ac8c7d72464d57e7d891b13aab9d9efbb" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classokapi_1_1IterativeMotorVelocityController" kindref="compound">IterativeMotorVelocityController</ref></type>
        <definition>IterativeMotorVelocityController okapi::IterativeControllerFactory::motorVelocity</definition>
        <argsstring>(MotorGroup imotor, std::shared_ptr&lt; IterativeVelocityController&lt; double, double &gt;&gt; icontroller)</argsstring>
        <name>motorVelocity</name>
        <param>
          <type><ref refid="classokapi_1_1MotorGroup" kindref="compound">MotorGroup</ref></type>
          <declname>imotor</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; <ref refid="classokapi_1_1IterativeVelocityController" kindref="compound">IterativeVelocityController</ref>&lt; double, double &gt;&gt;</type>
          <declname>icontroller</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Velocity PD controller that automatically writes to the motor.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>imotor</parametername>
</parameternamelist>
<parameterdescription>
<para>output motor </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>icontroller</parametername>
</parameternamelist>
<parameterdescription>
<para>controller to use </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/okapi/impl/control/iterative/iterativeControllerFactory.hpp" line="119" column="1" bodyfile="src/impl/control/iterative/iterativeControllerFactory.cpp" bodystart="77" bodyend="81"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="include/okapi/impl/control/iterative/iterativeControllerFactory.hpp" line="19" column="1" bodyfile="include/okapi/impl/control/iterative/iterativeControllerFactory.hpp" bodystart="19" bodyend="121"/>
    <listofallmembers>
      <member refid="classokapi_1_1IterativeControllerFactory_1a55d93373ed17166b0f5747a76690d1de" prot="public" virt="non-virtual"><scope>okapi::IterativeControllerFactory</scope><name>motorVelocity</name></member>
      <member refid="classokapi_1_1IterativeControllerFactory_1a5227fff05674d0165c02e02730a2a4c6" prot="public" virt="non-virtual"><scope>okapi::IterativeControllerFactory</scope><name>motorVelocity</name></member>
      <member refid="classokapi_1_1IterativeControllerFactory_1a10580d88f6c4d2f4b7355068c1ab3def" prot="public" virt="non-virtual"><scope>okapi::IterativeControllerFactory</scope><name>motorVelocity</name></member>
      <member refid="classokapi_1_1IterativeControllerFactory_1ac8c7d72464d57e7d891b13aab9d9efbb" prot="public" virt="non-virtual"><scope>okapi::IterativeControllerFactory</scope><name>motorVelocity</name></member>
      <member refid="classokapi_1_1IterativeControllerFactory_1a2ff979d01d67cee2c0d86b07690a8081" prot="public" virt="non-virtual"><scope>okapi::IterativeControllerFactory</scope><name>posPID</name></member>
      <member refid="classokapi_1_1IterativeControllerFactory_1a7b9d88febe596e3fd11eca8a91f2c05c" prot="public" virt="non-virtual"><scope>okapi::IterativeControllerFactory</scope><name>velPID</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
