<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="classokapi_1_1ADIGyro" kind="class" language="C++" prot="public">
    <compoundname>okapi::ADIGyro</compoundname>
    <basecompoundref refid="classokapi_1_1ContinuousRotarySensor" prot="public" virt="non-virtual">okapi::ContinuousRotarySensor</basecompoundref>
    <includes refid="adiGyro_8hpp" local="no">adiGyro.hpp</includes>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classokapi_1_1ADIGyro_1a2ad9717b3e55a829467d9e696de252ac" prot="protected" static="no" mutable="no">
        <type>pros::c::adi_gyro_t</type>
        <definition>pros::c::adi_gyro_t okapi::ADIGyro::gyro</definition>
        <argsstring></argsstring>
        <name>gyro</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/okapi/impl/device/rotarysensor/adiGyro.hpp" line="62" column="1" bodyfile="include/okapi/impl/device/rotarysensor/adiGyro.hpp" bodystart="62" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classokapi_1_1ADIGyro_1a04db661121327089b43d82f9aa21e168" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>okapi::ADIGyro::ADIGyro</definition>
        <argsstring>(std::uint8_t iport, double imultiplier=1)</argsstring>
        <name>ADIGyro</name>
        <param>
          <type>std::uint8_t</type>
          <declname>iport</declname>
        </param>
        <param>
          <type>double</type>
          <declname>imultiplier</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>A gyroscope on the given ADI port. If the port has not previously been configured as a gyro, then the constructor will block for 1 second for calibration. The gyro measures in tenths of a degree, so there are 3600 measurement points per revolution.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>iport</parametername>
</parameternamelist>
<parameterdescription>
<para>the ADI port number </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>imultiplier</parametername>
</parameternamelist>
<parameterdescription>
<para>a value multiplied by the gyro heading value </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/okapi/impl/device/rotarysensor/adiGyro.hpp" line="25" column="1" bodyfile="src/impl/device/rotarysensor/adiGyro.cpp" bodystart="12" bodyend="14"/>
      </memberdef>
      <memberdef kind="function" id="classokapi_1_1ADIGyro_1a406cc8ec708c49c507ccab63ffad693c" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>okapi::ADIGyro::~ADIGyro</definition>
        <argsstring>()</argsstring>
        <name>~ADIGyro</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/okapi/impl/device/rotarysensor/adiGyro.hpp" line="27" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classokapi_1_1ADIGyro_1a3a4a0a319c723091aad0b2125d701ca4" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>double</type>
        <definition>double okapi::ADIGyro::get</definition>
        <argsstring>() const override</argsstring>
        <name>get</name>
        <reimplements refid="classokapi_1_1RotarySensor_1ac5534dc6c3bcbd8ea2f4e54a04cda734">get</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the current sensor value.</para>
<para><simplesect kind="return"><para>the current sensor value, or <computeroutput>PROS_ERR</computeroutput> on a failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/okapi/impl/device/rotarysensor/adiGyro.hpp" line="34" column="1" bodyfile="src/impl/device/rotarysensor/adiGyro.cpp" bodystart="18" bodyend="20"/>
      </memberdef>
      <memberdef kind="function" id="classokapi_1_1ADIGyro_1a5fa8fa3653e8c2eeff81a56b80e79f7c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double okapi::ADIGyro::getRemapped</definition>
        <argsstring>(double iupperBound=1800, double ilowerBound=-1800) const __attribute__((optimize(3)))</argsstring>
        <name>getRemapped</name>
        <param>
          <type>double</type>
          <declname>iupperBound</declname>
          <defval>1800</defval>
        </param>
        <param>
          <type>double</type>
          <declname>ilowerBound</declname>
          <defval>-1800</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the current sensor value remapped into the target range ([1800, -1800] by default).</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>iupperBound</parametername>
</parameternamelist>
<parameterdescription>
<para>the upper bound of the range. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ilowerBound</parametername>
</parameternamelist>
<parameterdescription>
<para>the lower bound of the range. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the remapped sensor value. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/okapi/impl/device/rotarysensor/adiGyro.hpp" line="43" column="1" bodyfile="src/impl/device/rotarysensor/adiGyro.cpp" bodystart="22" bodyend="30"/>
      </memberdef>
      <memberdef kind="function" id="classokapi_1_1ADIGyro_1a316eec0bf6008c50fea6d1a621fd2e87" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>std::int32_t</type>
        <definition>std::int32_t okapi::ADIGyro::reset</definition>
        <argsstring>() override</argsstring>
        <name>reset</name>
        <reimplements refid="classokapi_1_1ContinuousRotarySensor_1ae7268b0603097ac2d93a67e4fefa43e0">reset</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Reset the sensor to zero.</para>
<para><simplesect kind="return"><para><computeroutput>1</computeroutput> on success, <computeroutput>PROS_ERR</computeroutput> on fail </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/okapi/impl/device/rotarysensor/adiGyro.hpp" line="51" column="1" bodyfile="src/impl/device/rotarysensor/adiGyro.cpp" bodystart="32" bodyend="34"/>
      </memberdef>
      <memberdef kind="function" id="classokapi_1_1ADIGyro_1ad6a8ed104c8383a64c984ceb1147bca4" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>double</type>
        <definition>double okapi::ADIGyro::controllerGet</definition>
        <argsstring>() override</argsstring>
        <name>controllerGet</name>
        <reimplements refid="classokapi_1_1ControllerInput_1a3c6c86d897983f367928a93890551e17">controllerGet</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the sensor value for use in a control loop. This method might be automatically called in another thread by the controller.</para>
<para><simplesect kind="return"><para>the current sensor value, or <computeroutput>PROS_ERR</computeroutput> on a failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/okapi/impl/device/rotarysensor/adiGyro.hpp" line="59" column="1" bodyfile="src/impl/device/rotarysensor/adiGyro.cpp" bodystart="36" bodyend="38"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="35">
        <label>okapi::ADIGyro</label>
        <link refid="classokapi_1_1ADIGyro"/>
        <childnode refid="36" relation="public-inheritance">
        </childnode>
      </node>
      <node id="37">
        <label>okapi::RotarySensor</label>
        <link refid="classokapi_1_1RotarySensor"/>
        <childnode refid="38" relation="public-inheritance">
        </childnode>
      </node>
      <node id="36">
        <label>okapi::ContinuousRotarySensor</label>
        <link refid="classokapi_1_1ContinuousRotarySensor"/>
        <childnode refid="37" relation="public-inheritance">
        </childnode>
      </node>
      <node id="38">
        <label>okapi::ControllerInput&lt; double &gt;</label>
        <link refid="classokapi_1_1ControllerInput"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="39">
        <label>okapi::ADIGyro</label>
        <link refid="classokapi_1_1ADIGyro"/>
        <childnode refid="40" relation="public-inheritance">
        </childnode>
      </node>
      <node id="41">
        <label>okapi::RotarySensor</label>
        <link refid="classokapi_1_1RotarySensor"/>
        <childnode refid="42" relation="public-inheritance">
        </childnode>
      </node>
      <node id="40">
        <label>okapi::ContinuousRotarySensor</label>
        <link refid="classokapi_1_1ContinuousRotarySensor"/>
        <childnode refid="41" relation="public-inheritance">
        </childnode>
      </node>
      <node id="42">
        <label>okapi::ControllerInput&lt; double &gt;</label>
        <link refid="classokapi_1_1ControllerInput"/>
      </node>
    </collaborationgraph>
    <location file="include/okapi/impl/device/rotarysensor/adiGyro.hpp" line="15" column="1" bodyfile="include/okapi/impl/device/rotarysensor/adiGyro.hpp" bodystart="15" bodyend="63"/>
    <listofallmembers>
      <member refid="classokapi_1_1ADIGyro_1a04db661121327089b43d82f9aa21e168" prot="public" virt="non-virtual"><scope>okapi::ADIGyro</scope><name>ADIGyro</name></member>
      <member refid="classokapi_1_1ADIGyro_1ad6a8ed104c8383a64c984ceb1147bca4" prot="public" virt="virtual"><scope>okapi::ADIGyro</scope><name>controllerGet</name></member>
      <member refid="classokapi_1_1ADIGyro_1a3a4a0a319c723091aad0b2125d701ca4" prot="public" virt="virtual"><scope>okapi::ADIGyro</scope><name>get</name></member>
      <member refid="classokapi_1_1ADIGyro_1a5fa8fa3653e8c2eeff81a56b80e79f7c" prot="public" virt="non-virtual"><scope>okapi::ADIGyro</scope><name>getRemapped</name></member>
      <member refid="classokapi_1_1ADIGyro_1a2ad9717b3e55a829467d9e696de252ac" prot="protected" virt="non-virtual"><scope>okapi::ADIGyro</scope><name>gyro</name></member>
      <member refid="classokapi_1_1ADIGyro_1a316eec0bf6008c50fea6d1a621fd2e87" prot="public" virt="virtual"><scope>okapi::ADIGyro</scope><name>reset</name></member>
      <member refid="classokapi_1_1ADIGyro_1a406cc8ec708c49c507ccab63ffad693c" prot="public" virt="virtual"><scope>okapi::ADIGyro</scope><name>~ADIGyro</name></member>
      <member refid="classokapi_1_1RotarySensor_1ad34ebb82ce8e5487a286ce95c1aad086" prot="public" virt="virtual"><scope>okapi::ADIGyro</scope><name>~RotarySensor</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
