<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="classokapi_1_1VelMathFactory" kind="class" language="C++" prot="public">
    <compoundname>okapi::VelMathFactory</compoundname>
    <includes refid="velMathFactory_8hpp" local="no">velMathFactory.hpp</includes>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classokapi_1_1VelMathFactory_1a67a3815e387baa98b4eb55d8d29472e0" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classokapi_1_1VelMath" kindref="compound">VelMath</ref></type>
        <definition>VelMath okapi::VelMathFactory::create</definition>
        <argsstring>(double iticksPerRev, QTime isampleTime=0_ms, const std::shared_ptr&lt; Logger &gt; &amp;ilogger=Logger::getDefaultLogger())</argsstring>
        <name>create</name>
        <param>
          <type>double</type>
          <declname>iticksPerRev</declname>
        </param>
        <param>
          <type>QTime</type>
          <declname>isampleTime</declname>
          <defval>0_ms</defval>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="classokapi_1_1Logger" kindref="compound">Logger</ref> &gt; &amp;</type>
          <declname>ilogger</declname>
          <defval><ref refid="classokapi_1_1Logger_1a5053cf778b4b55acba788a3797dc96d2" kindref="member">Logger::getDefaultLogger</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Velocity math helper. Calculates filtered velocity. Throws a std::invalid_argument exception if iticksPerRev is zero. Averages the last two readings.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>iticksPerRev</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of ticks per revolution. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>isampleTime</parametername>
</parameternamelist>
<parameterdescription>
<para>The minimum time between samples. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ilogger</parametername>
</parameternamelist>
<parameterdescription>
<para>The logger this instance will log to. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/okapi/impl/filter/velMathFactory.hpp" line="24" column="1" bodyfile="src/impl/filter/velMathFactory.cpp" bodystart="13" bodyend="21"/>
      </memberdef>
      <memberdef kind="function" id="classokapi_1_1VelMathFactory_1a26b75e227e114812131c64d17015948f" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::unique_ptr&lt; <ref refid="classokapi_1_1VelMath" kindref="compound">VelMath</ref> &gt;</type>
        <definition>std::unique_ptr&lt; VelMath &gt; okapi::VelMathFactory::createPtr</definition>
        <argsstring>(double iticksPerRev, QTime isampleTime=0_ms, const std::shared_ptr&lt; Logger &gt; &amp;ilogger=Logger::getDefaultLogger())</argsstring>
        <name>createPtr</name>
        <param>
          <type>double</type>
          <declname>iticksPerRev</declname>
        </param>
        <param>
          <type>QTime</type>
          <declname>isampleTime</declname>
          <defval>0_ms</defval>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="classokapi_1_1Logger" kindref="compound">Logger</ref> &gt; &amp;</type>
          <declname>ilogger</declname>
          <defval><ref refid="classokapi_1_1Logger_1a5053cf778b4b55acba788a3797dc96d2" kindref="member">Logger::getDefaultLogger</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Velocity math helper. Calculates filtered velocity. Throws a std::invalid_argument exception if iticksPerRev is zero. Averages the last two readings.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>iticksPerRev</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of ticks per revolution. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>isampleTime</parametername>
</parameternamelist>
<parameterdescription>
<para>The minimum time between samples. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ilogger</parametername>
</parameternamelist>
<parameterdescription>
<para>The logger this instance will log to. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/okapi/impl/filter/velMathFactory.hpp" line="37" column="1" bodyfile="src/impl/filter/velMathFactory.cpp" bodystart="23" bodyend="31"/>
      </memberdef>
      <memberdef kind="function" id="classokapi_1_1VelMathFactory_1a7a312909314e4016d82a173ebcbc2bdc" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classokapi_1_1VelMath" kindref="compound">VelMath</ref></type>
        <definition>VelMath okapi::VelMathFactory::create</definition>
        <argsstring>(double iticksPerRev, std::unique_ptr&lt; Filter &gt; ifilter, QTime isampleTime=0_ms, const std::shared_ptr&lt; Logger &gt; &amp;ilogger=Logger::getDefaultLogger())</argsstring>
        <name>create</name>
        <param>
          <type>double</type>
          <declname>iticksPerRev</declname>
        </param>
        <param>
          <type>std::unique_ptr&lt; <ref refid="classokapi_1_1Filter" kindref="compound">Filter</ref> &gt;</type>
          <declname>ifilter</declname>
        </param>
        <param>
          <type>QTime</type>
          <declname>isampleTime</declname>
          <defval>0_ms</defval>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="classokapi_1_1Logger" kindref="compound">Logger</ref> &gt; &amp;</type>
          <declname>ilogger</declname>
          <defval><ref refid="classokapi_1_1Logger_1a5053cf778b4b55acba788a3797dc96d2" kindref="member">Logger::getDefaultLogger</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Velocity math helper. Calculates filtered velocity. Throws a std::invalid_argument exception if iticksPerRev is zero.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>iticksPerRev</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of ticks per revolution. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ifilter</parametername>
</parameternamelist>
<parameterdescription>
<para>The filter used for filtering the calculated velocity. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>isampleTime</parametername>
</parameternamelist>
<parameterdescription>
<para>The minimum time between samples. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ilogger</parametername>
</parameternamelist>
<parameterdescription>
<para>The logger this instance will log to. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/okapi/impl/filter/velMathFactory.hpp" line="50" column="1" bodyfile="src/impl/filter/velMathFactory.cpp" bodystart="33" bodyend="38"/>
      </memberdef>
      <memberdef kind="function" id="classokapi_1_1VelMathFactory_1aeccef757e8dc90b569c1174c903bd4f9" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::unique_ptr&lt; <ref refid="classokapi_1_1VelMath" kindref="compound">VelMath</ref> &gt;</type>
        <definition>std::unique_ptr&lt; VelMath &gt; okapi::VelMathFactory::createPtr</definition>
        <argsstring>(double iticksPerRev, std::unique_ptr&lt; Filter &gt; ifilter, QTime isampleTime=0_ms, const std::shared_ptr&lt; Logger &gt; &amp;ilogger=Logger::getDefaultLogger())</argsstring>
        <name>createPtr</name>
        <param>
          <type>double</type>
          <declname>iticksPerRev</declname>
        </param>
        <param>
          <type>std::unique_ptr&lt; <ref refid="classokapi_1_1Filter" kindref="compound">Filter</ref> &gt;</type>
          <declname>ifilter</declname>
        </param>
        <param>
          <type>QTime</type>
          <declname>isampleTime</declname>
          <defval>0_ms</defval>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="classokapi_1_1Logger" kindref="compound">Logger</ref> &gt; &amp;</type>
          <declname>ilogger</declname>
          <defval><ref refid="classokapi_1_1Logger_1a5053cf778b4b55acba788a3797dc96d2" kindref="member">Logger::getDefaultLogger</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Velocity math helper. Calculates filtered velocity. Throws a std::invalid_argument exception if iticksPerRev is zero.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>iticksPerRev</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of ticks per revolution. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ifilter</parametername>
</parameternamelist>
<parameterdescription>
<para>The filter used for filtering the calculated velocity. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>isampleTime</parametername>
</parameternamelist>
<parameterdescription>
<para>The minimum time between samples. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ilogger</parametername>
</parameternamelist>
<parameterdescription>
<para>The logger this instance will log to. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/okapi/impl/filter/velMathFactory.hpp" line="65" column="1" bodyfile="src/impl/filter/velMathFactory.cpp" bodystart="40" bodyend="46"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="include/okapi/impl/filter/velMathFactory.hpp" line="14" column="1" bodyfile="include/okapi/impl/filter/velMathFactory.hpp" bodystart="14" bodyend="69"/>
    <listofallmembers>
      <member refid="classokapi_1_1VelMathFactory_1a67a3815e387baa98b4eb55d8d29472e0" prot="public" virt="non-virtual"><scope>okapi::VelMathFactory</scope><name>create</name></member>
      <member refid="classokapi_1_1VelMathFactory_1a7a312909314e4016d82a173ebcbc2bdc" prot="public" virt="non-virtual"><scope>okapi::VelMathFactory</scope><name>create</name></member>
      <member refid="classokapi_1_1VelMathFactory_1a26b75e227e114812131c64d17015948f" prot="public" virt="non-virtual"><scope>okapi::VelMathFactory</scope><name>createPtr</name></member>
      <member refid="classokapi_1_1VelMathFactory_1aeccef757e8dc90b569c1174c903bd4f9" prot="public" virt="non-virtual"><scope>okapi::VelMathFactory</scope><name>createPtr</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
